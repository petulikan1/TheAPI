/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Hex_27
 * Copyright (c) 2022 Crypto Morin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package me.devtec.theapi.bukkit.xseries;

import me.devtec.shared.Ref;
import me.devtec.shared.dataholder.StringContainer;
import me.devtec.shared.dataholder.cache.TempMap;
import me.devtec.shared.utility.ParseUtils;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.SpawnEggMeta;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Collectors;

/**
 * @author Crypto Morin
 * @version 11.5.0
 * @see Material
 * @see ItemStack
 */
public enum XMaterial {
    ACACIA_BOAT(447, "BOAT_ACACIA"), ACACIA_BUTTON(-1, "WOOD_BUTTON"), ACACIA_CHEST_BOAT(-1), ACACIA_DOOR(430, "ACACIA_DOOR", "ACACIA_DOOR_ITEM"), ACACIA_FENCE(192), ACACIA_FENCE_GATE(187),
    ACACIA_HANGING_SIGN(-1), ACACIA_LEAVES(161, 0, "LEAVES_2"), ACACIA_LOG(162, 0, "LOG_2"), ACACIA_PLANKS(5, 4, "WOOD"), ACACIA_PRESSURE_PLATE(-1, "WOOD_PLATE"), ACACIA_SAPLING(6, 4, "SAPLING"),
    ACACIA_SIGN(-1, "SIGN_POST", "SIGN"), ACACIA_SLAB(126, 4, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), ACACIA_STAIRS(163), ACACIA_TRAPDOOR(-1, "TRAP_DOOR"), ACACIA_WALL_HANGING_SIGN(-1),
    ACACIA_WALL_SIGN(-1, "WALL_SIGN"), ACACIA_WOOD(-1, 0, "LOG_2"), ACTIVATOR_RAIL(157),
    /**
     * https://minecraft.gamepedia.com/Air {@link Material#isAir()}
     *
     * @see #VOID_AIR
     * @see #CAVE_AIR
     */
    AIR(0), ALLAY_SPAWN_EGG(-1), ALLIUM(38, 2, "RED_ROSE"), AMETHYST_BLOCK(-1), AMETHYST_CLUSTER(-1), AMETHYST_SHARD(-1), ANCIENT_DEBRIS(-1), ANDESITE(1, 5, "STONE"), ANDESITE_SLAB(-1),
    ANDESITE_STAIRS(-1), ANDESITE_WALL(-1), ANGLER_POTTERY_SHERD(-1), ANVIL(145), APPLE(260), ARMADILLO_SCUTE(-1), ARMADILLO_SPAWN_EGG(-1), ARCHER_POTTERY_SHERD(-1), ARMOR_STAND(416),
    ARMS_UP_POTTERY_SHERD(-1), ARROW(262), ATTACHED_MELON_STEM(105, 7, "MELON_STEM"), ATTACHED_PUMPKIN_STEM(104, 7, "PUMPKIN_STEM"), AXOLOTL_BUCKET(-1), AXOLOTL_SPAWN_EGG(-1), AZALEA(-1),
    AZALEA_LEAVES(-1), AZURE_BLUET(38, 3, "RED_ROSE"), BAKED_POTATO(393), BAMBOO(-1), BAMBOO_BLOCK(-1), BAMBOO_BUTTON(-1), BAMBOO_CHEST_RAFT(-1), BAMBOO_DOOR(-1), BAMBOO_FENCE(-1),
    BAMBOO_FENCE_GATE(-1), BAMBOO_HANGING_SIGN(-1), BAMBOO_MOSAIC(-1), BAMBOO_MOSAIC_SLAB(-1), BAMBOO_MOSAIC_STAIRS(-1), BAMBOO_PLANKS(-1), BAMBOO_PRESSURE_PLATE(-1), BAMBOO_RAFT(-1),
    BAMBOO_SAPLING(-1), BAMBOO_SIGN(-1), BAMBOO_SLAB(-1), BAMBOO_STAIRS(-1), BAMBOO_TRAPDOOR(-1), BAMBOO_WALL_HANGING_SIGN(-1), BAMBOO_WALL_SIGN(-1), BARREL(-1), BARRIER(166), BASALT(-1),
    BAT_SPAWN_EGG(383, 65, "MONSTER_EGG"), BEACON(138), BEDROCK(7), BEEF(363, "RAW_BEEF"), BEEHIVE(-1),
    /**
     * Beetroot is a known material in pre-1.13
     */
    BEETROOT(-1, "BEETROOT_BLOCK"), BEETROOTS(434, "BEETROOT"), BEETROOT_SEEDS(435), BEETROOT_SOUP(436), BEE_NEST(-1), BEE_SPAWN_EGG(-1), BELL(-1), BIG_DRIPLEAF(-1), BIG_DRIPLEAF_STEM(-1),
    BIRCH_BOAT(445, "BOAT_BIRCH"), BIRCH_BUTTON(-1, "WOOD_BUTTON"), BIRCH_CHEST_BOAT(-1), BIRCH_DOOR(428, "BIRCH_DOOR", "BIRCH_DOOR_ITEM"), BIRCH_FENCE(189), BIRCH_FENCE_GATE(184),
    BIRCH_HANGING_SIGN(-1), BIRCH_LEAVES(18, 2, "LEAVES"), BIRCH_LOG(17, 2, "LOG"), BIRCH_PLANKS(5, 2, "WOOD"), BIRCH_PRESSURE_PLATE(-1, "WOOD_PLATE"), BIRCH_SAPLING(6, 2, "SAPLING"),
    BIRCH_SIGN(-1, "SIGN_POST", "SIGN"), BIRCH_SLAB(126, 2, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), BIRCH_STAIRS(135, "BIRCH_WOOD_STAIRS"), BIRCH_TRAPDOOR(-1, "TRAP_DOOR"),
    BIRCH_WALL_HANGING_SIGN(-1), BIRCH_WALL_SIGN(-1, "WALL_SIGN"), BIRCH_WOOD(-1, 2, "LOG"), BLACKSTONE(-1), BLACKSTONE_SLAB(-1), BLACKSTONE_STAIRS(-1), BLACKSTONE_WALL(-1),
    BLACK_BANNER(425, "STANDING_BANNER", "BANNER"),
    /**
     * Version 1.12+ interprets "BED" as BLACK_BED due to enum alphabetic ordering.
     */
    BLACK_BED(355, supports(12) ? 15 : 0, "BED_BLOCK", "BED"), BLACK_CANDLE(-1), BLACK_CANDLE_CAKE(-1), BLACK_CARPET(171, 15, "CARPET"), BLACK_CONCRETE(251, 15, "CONCRETE"),
    BLACK_CONCRETE_POWDER(252, 15, "CONCRETE_POWDER"), BLACK_DYE(-1), BLACK_GLAZED_TERRACOTTA(250), BLACK_SHULKER_BOX(234), BLACK_STAINED_GLASS(95, 15, "STAINED_GLASS"),
    BLACK_STAINED_GLASS_PANE(160, 15, "STAINED_GLASS_PANE"), BLACK_TERRACOTTA(159, 15, "STAINED_CLAY"), BLACK_WALL_BANNER(177, "WALL_BANNER"), BLACK_WOOL(35, 15, "WOOL"), BLADE_POTTERY_SHERD(-1),
    BLAST_FURNACE(-1), BLAZE_POWDER(377), BLAZE_ROD(369), BLAZE_SPAWN_EGG(383, 61, "MONSTER_EGG"), BLUE_BANNER(425, 4, "STANDING_BANNER", "BANNER"),
    BLUE_BED(355, supports(12) ? 11 : 0, "BED_BLOCK", "BED"), BLUE_CANDLE(-1), BLUE_CANDLE_CAKE(-1), BLUE_CARPET(171, 11, "CARPET"), BLUE_CONCRETE(251, 11, "CONCRETE"),
    BLUE_CONCRETE_POWDER(252, 11, "CONCRETE_POWDER"), BLUE_DYE(351, 4, "INK_SACK", "LAPIS_LAZULI"), BLUE_GLAZED_TERRACOTTA(246), BLUE_ICE(-1), BLUE_ORCHID(38, 1, "RED_ROSE"), BLUE_SHULKER_BOX(230),
    BLUE_STAINED_GLASS(95, 11, "STAINED_GLASS"), BLUE_STAINED_GLASS_PANE(160, 11, "THIN_GLASS", "STAINED_GLASS_PANE"), BLUE_TERRACOTTA(159, 11, "STAINED_CLAY"),
    BLUE_WALL_BANNER(177, 4, "WALL_BANNER"), BLUE_WOOL(35, 11, "WOOL"), BOGGED_SPAWN_EGG(-1), BOLT_ARMOR_TRIM_SMITHING_TEMPLATE(-1), BONE(352), BONE_BLOCK(216), BONE_MEAL(351, 15, "INK_SACK"),
    BOOK(340), BOOKSHELF(47), BOW(261), BOWL(281), BRAIN_CORAL(-1), BRAIN_CORAL_BLOCK(-1), BRAIN_CORAL_FAN(-1), BRAIN_CORAL_WALL_FAN(-1), BREAD(297), BREEZE_SPAWN_EGG(-1), BREEZE_ROD(-1),
    BREWER_POTTERY_SHERD(-1), BREWING_STAND(379, "BREWING_STAND", "BREWING_STAND_ITEM"), BRICK(336, "CLAY_BRICK"), BRICKS(45, "BRICKS", "BRICK"), BRICK_SLAB(44, 4, "STEP"), BRICK_STAIRS(108),
    BRICK_WALL(-1), BROWN_BANNER(425, 3, "STANDING_BANNER", "BANNER"), BROWN_BED(355, supports(12) ? 12 : 0, "BED_BLOCK", "BED"), BRUSH(-1), BROWN_CANDLE(-1), BROWN_CANDLE_CAKE(-1),
    BROWN_CARPET(171, 12, "CARPET"), BROWN_CONCRETE(251, 12, "CONCRETE"), BROWN_CONCRETE_POWDER(252, 12, "CONCRETE_POWDER"), BROWN_DYE(351, 3, "INK_SACK", "DYE", "COCOA_BEANS"),
    BROWN_GLAZED_TERRACOTTA(247), BROWN_MUSHROOM(39), BROWN_MUSHROOM_BLOCK(99, "BROWN_MUSHROOM", "HUGE_MUSHROOM_1"), BROWN_SHULKER_BOX(231), BROWN_STAINED_GLASS(95, 12, "STAINED_GLASS"),
    BROWN_STAINED_GLASS_PANE(160, 12, "THIN_GLASS", "STAINED_GLASS_PANE"), BROWN_TERRACOTTA(159, 12, "STAINED_CLAY"), BROWN_WALL_BANNER(177, 3, "WALL_BANNER"), BROWN_WOOL(35, 12, "WOOL"),
    BUBBLE_COLUMN(-1), BUBBLE_CORAL(-1), BUBBLE_CORAL_BLOCK(-1), BUBBLE_CORAL_FAN(-1), BUBBLE_CORAL_WALL_FAN(-1), BUCKET(325), BUDDING_AMETHYST(-1), BUNDLE(-1), BURN_POTTERY_SHERD(-1), CACTUS(81),
    CAKE(354, "CAKE_BLOCK"), CALCITE(-1), CALIBRATED_SCULK_SENSOR(-1), CAMEL_SPAWN_EGG(-1), CAMPFIRE(-1), CANDLE(-1), CANDLE_CAKE(-1), CARROT(391, "CARROT_ITEM"), CARROTS(141, "CARROT"),
    CARROT_ON_A_STICK(398, "CARROT_STICK"), CARTOGRAPHY_TABLE(-1), CARVED_PUMPKIN(-1), CAT_SPAWN_EGG(-1), CAULDRON(380, "CAULDRON", "CAULDRON_ITEM"),
    /**
     * 1.13 tag is not added because it's the same thing as {@link #AIR}
     *
     * @see #VOID_AIR
     */
    CAVE_AIR(-1, "AIR"), CAVE_SPIDER_SPAWN_EGG(383, 59, "MONSTER_EGG"), CAVE_VINES(-1), CAVE_VINES_PLANT(-1), CHAIN(-1), CHAINMAIL_BOOTS(305), CHAINMAIL_CHESTPLATE(303), CHAINMAIL_HELMET(302),
    CHAINMAIL_LEGGINGS(304), CHAIN_COMMAND_BLOCK(Ref.isNewerThan(8) ? 211 : -1, "COMMAND", "COMMAND_CHAIN"), CHARCOAL(263, 1, "COAL"), CHERRY_BOAT(-1), CHERRY_BUTTON(-1), CHERRY_CHEST_BOAT(-1),
    CHERRY_DOOR(-1), CHERRY_FENCE(-1), CHERRY_FENCE_GATE(-1), CHERRY_HANGING_SIGN(-1), CHERRY_LEAVES(-1), CHERRY_LOG(-1), CHERRY_PLANKS(-1), CHERRY_PRESSURE_PLATE(-1), CHERRY_SAPLING(-1),
    CHERRY_SIGN(-1), CHERRY_SLAB(-1), CHERRY_STAIRS(-1), CHERRY_TRAPDOOR(-1), CHERRY_WALL_HANGING_SIGN(-1), CHERRY_WALL_SIGN(-1), CHERRY_WOOD(-1), CHEST(54, "LOCKED_CHEST"),
    CHEST_MINECART(342, "STORAGE_MINECART"), CHICKEN(365, "RAW_CHICKEN"), CHICKEN_SPAWN_EGG(383, 93, "MONSTER_EGG"), CHIPPED_ANVIL(145, 1, "ANVIL"), CHISELED_BOOKSHELF(-1), CHISELED_COPPER(-1),
    CHISELED_DEEPSLATE(-1), CHISELED_NETHER_BRICKS(-1, 1, "NETHER_BRICKS"), CHISELED_POLISHED_BLACKSTONE(-1, "POLISHED_BLACKSTONE"), CHISELED_QUARTZ_BLOCK(155, 1, "QUARTZ_BLOCK"),
    CHISELED_RED_SANDSTONE(179, 1, "RED_SANDSTONE"), CHISELED_SANDSTONE(24, 1, "SANDSTONE"), CHISELED_STONE_BRICKS(98, 3, "SMOOTH_BRICK"), CHISELED_TUFF(-1), CHISELED_TUFF_BRICKS(-1),
    CHORUS_FLOWER(200), CHORUS_FRUIT(432), CHORUS_PLANT(199), CLAY(82), CLAY_BALL(337), CLOCK(347, "WATCH"), COAL(263), COAL_BLOCK(173), COAL_ORE(16), COARSE_DIRT(3, 1, "DIRT"), COBBLED_DEEPSLATE(-1),
    COBBLED_DEEPSLATE_SLAB(-1), COBBLED_DEEPSLATE_STAIRS(-1), COBBLED_DEEPSLATE_WALL(-1), COBBLESTONE(4), COBBLESTONE_SLAB(44, 3, "STEP"), COBBLESTONE_STAIRS(67), COBBLESTONE_WALL(139, "COBBLE_WALL"),
    COBWEB(30, "WEB"), COCOA(127), COCOA_BEANS(351, 3, "INK_SACK"), COD(349, "RAW_FISH"), COD_BUCKET(-1), COD_SPAWN_EGG(-1), COMMAND_BLOCK(137, "COMMAND"),
    COMMAND_BLOCK_MINECART(422, "COMMAND_MINECART"),
    /**
     * Unlike redstone torch and redstone lamp... neither REDTONE_COMPARATOR_OFF nor
     * REDSTONE_COMPARATOR_ON are items. REDSTONE_COMPARATOR is.
     *
     * @see #REDSTONE_TORCH
     * @see #REDSTONE_LAMP
     */
    COMPARATOR(404, "REDSTONE_COMPARATOR_OFF", "REDSTONE_COMPARATOR_ON", "REDSTONE_COMPARATOR"), COMPASS(345), COMPOSTER(-1), CONDUIT(-1), COOKED_BEEF(364), COOKED_CHICKEN(366),
    COOKED_COD(350, "COOKED_FISH"), COOKED_MUTTON(424), COOKED_PORKCHOP(320, "GRILLED_PORK"), COOKED_RABBIT(412), COOKED_SALMON(350, 1, "COOKED_FISH"), COOKIE(357), COPPER_BLOCK(-1), COPPER_BULB(-1),
    COPPER_DOOR(-1), COPPER_GRATE(-1), COPPER_INGOT(-1), COPPER_ORE(-1), COPPER_TRAPDOOR(-1), CORNFLOWER(-1), COW_SPAWN_EGG(383, 92, "MONSTER_EGG"), CRACKED_DEEPSLATE_BRICKS(-1),
    CRACKED_DEEPSLATE_TILES(-1), CRACKED_NETHER_BRICKS(-1, 2, "NETHER_BRICKS"), CRACKED_POLISHED_BLACKSTONE_BRICKS(-1, "POLISHED_BLACKSTONE_BRICKS"), CRACKED_STONE_BRICKS(98, 2, "SMOOTH_BRICK"),
    CRAFTER(-1), CRAFTING_TABLE(58, "WORKBENCH"), CREEPER_BANNER_PATTERN(-1), CREEPER_HEAD(397, 4, "SKULL", "SKULL_ITEM"), CREEPER_SPAWN_EGG(383, 50, "MONSTER_EGG"),
    CREEPER_WALL_HEAD(-1, 4, "SKULL", "SKULL_ITEM"), CRIMSON_BUTTON(-1), CRIMSON_DOOR(-1), CRIMSON_FENCE(-1), CRIMSON_FENCE_GATE(-1), CRIMSON_FUNGUS(-1), CRIMSON_HANGING_SIGN(-1), CRIMSON_HYPHAE(-1),
    CRIMSON_NYLIUM(-1), CRIMSON_PLANKS(-1), CRIMSON_PRESSURE_PLATE(-1), CRIMSON_ROOTS(-1), CRIMSON_SIGN(-1, "SIGN_POST"), CRIMSON_SLAB(-1), CRIMSON_STAIRS(-1), CRIMSON_STEM(-1), CRIMSON_TRAPDOOR(-1),
    CRIMSON_WALL_HANGING_SIGN(-1), CRIMSON_WALL_SIGN(-1, "WALL_SIGN"), CROSSBOW(-1), CRYING_OBSIDIAN(-1), CUT_COPPER(-1), CUT_COPPER_SLAB(-1), CUT_COPPER_STAIRS(-1), CUT_RED_SANDSTONE(-1),
    CUT_RED_SANDSTONE_SLAB(-1, "STONE_SLAB2"), CUT_SANDSTONE(-1), CUT_SANDSTONE_SLAB(44, 1, "STEP"), CYAN_BANNER(425, 6, "STANDING_BANNER", "BANNER"),
    CYAN_BED(355, supports(12) ? 9 : 0, "BED_BLOCK", "BED"), CYAN_CANDLE(-1), CYAN_CANDLE_CAKE(-1), CYAN_CARPET(171, 9, "CARPET"), CYAN_CONCRETE(251, 9, "CONCRETE"),
    CYAN_CONCRETE_POWDER(252, 9, "CONCRETE_POWDER"), CYAN_DYE(351, 6, "INK_SACK"), CYAN_GLAZED_TERRACOTTA(244), CYAN_SHULKER_BOX(228), CYAN_STAINED_GLASS(95, 9, "STAINED_GLASS"),
    CYAN_STAINED_GLASS_PANE(160, 9, "STAINED_GLASS_PANE"), CYAN_TERRACOTTA(159, 9, "STAINED_CLAY"), CYAN_WALL_BANNER(177, 6, "WALL_BANNER"), CYAN_WOOL(35, 9, "WOOL"), DAMAGED_ANVIL(145, 2, "ANVIL"),
    DANDELION(37, "YELLOW_FLOWER"), DANGER_POTTERY_SHERD(-1), DARK_OAK_BOAT(448, "BOAT_DARK_OAK"), DARK_OAK_BUTTON(-1, "WOOD_BUTTON"), DARK_OAK_CHEST_BOAT(-1),
    DARK_OAK_DOOR(431, "DARK_OAK_DOOR", "DARK_OAK_DOOR_ITEM"), DARK_OAK_FENCE(191), DARK_OAK_FENCE_GATE(186), DARK_OAK_HANGING_SIGN(-1), DARK_OAK_LEAVES(161, 1, "LEAVES_2"),
    DARK_OAK_LOG(162, 1, "LOG_2"), DARK_OAK_PLANKS(5, 5, "WOOD"), DARK_OAK_PRESSURE_PLATE(-1, "WOOD_PLATE"), DARK_OAK_SAPLING(6, 5, "SAPLING"), DARK_OAK_SIGN(-1, "SIGN_POST", "SIGN"),
    DARK_OAK_SLAB(126, 5, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), DARK_OAK_STAIRS(164), DARK_OAK_TRAPDOOR(-1, "TRAP_DOOR"), DARK_OAK_WALL_HANGING_SIGN(-1),
    DARK_OAK_WALL_SIGN(-1, "WALL_SIGN"), DARK_OAK_WOOD(-1, 1, "LOG_2"), DARK_PRISMARINE(168, 2, "PRISMARINE"), DARK_PRISMARINE_SLAB(-1), DARK_PRISMARINE_STAIRS(-1),
    DAYLIGHT_DETECTOR(151, "DAYLIGHT_DETECTOR_INVERTED"), DEAD_BRAIN_CORAL(-1), DEAD_BRAIN_CORAL_BLOCK(-1), DEAD_BRAIN_CORAL_FAN(-1), DEAD_BRAIN_CORAL_WALL_FAN(-1), DEAD_BUBBLE_CORAL(-1),
    DEAD_BUBBLE_CORAL_BLOCK(-1), DEAD_BUBBLE_CORAL_FAN(-1), DEAD_BUBBLE_CORAL_WALL_FAN(-1), DEAD_BUSH(32, "LONG_GRASS"), DEAD_FIRE_CORAL(-1), DEAD_FIRE_CORAL_BLOCK(-1), DEAD_FIRE_CORAL_FAN(-1),
    DEAD_FIRE_CORAL_WALL_FAN(-1), DEAD_HORN_CORAL(-1), DEAD_HORN_CORAL_BLOCK(-1), DEAD_HORN_CORAL_FAN(-1), DEAD_HORN_CORAL_WALL_FAN(-1), DEAD_TUBE_CORAL(-1), DEAD_TUBE_CORAL_BLOCK(-1),
    DEAD_TUBE_CORAL_FAN(-1), DEAD_TUBE_CORAL_WALL_FAN(-1), DEBUG_STICK(-1), DECORATED_POT(-1), DEEPSLATE(-1), DEEPSLATE_BRICKS(-1), DEEPSLATE_BRICK_SLAB(-1), DEEPSLATE_BRICK_STAIRS(-1),
    DEEPSLATE_BRICK_WALL(-1), DEEPSLATE_COAL_ORE(-1), DEEPSLATE_COPPER_ORE(-1), DEEPSLATE_DIAMOND_ORE(-1), DEEPSLATE_EMERALD_ORE(-1), DEEPSLATE_GOLD_ORE(-1), DEEPSLATE_IRON_ORE(-1),
    DEEPSLATE_LAPIS_ORE(-1), DEEPSLATE_REDSTONE_ORE(-1), DEEPSLATE_TILES(-1), DEEPSLATE_TILE_SLAB(-1), DEEPSLATE_TILE_STAIRS(-1), DEEPSLATE_TILE_WALL(-1), DETECTOR_RAIL(28), DIAMOND(264),
    DIAMOND_AXE(279), DIAMOND_BLOCK(57), DIAMOND_BOOTS(313), DIAMOND_CHESTPLATE(311), DIAMOND_HELMET(310), DIAMOND_HOE(293), DIAMOND_HORSE_ARMOR(419, "DIAMOND_BARDING"), DIAMOND_LEGGINGS(312),
    DIAMOND_ORE(56), DIAMOND_PICKAXE(278), DIAMOND_SHOVEL(277, "DIAMOND_SPADE"), DIAMOND_SWORD(276), DIORITE(1, 3, "STONE"), DIORITE_SLAB(-1), DIORITE_STAIRS(-1), DIORITE_WALL(-1), DIRT(3),
    /**
     * Changed in 1.17
     */
    DIRT_PATH(208, "GRASS_PATH"), DISC_FRAGMENT_5(-1), DISPENSER(23), DOLPHIN_SPAWN_EGG(-1), DONKEY_SPAWN_EGG(383, 32, "MONSTER_EGG"), DRAGON_BREATH(437, "DRAGONS_BREATH"), DRAGON_EGG(122),
    DRAGON_HEAD(397, 5, "SKULL", "SKULL_ITEM"), DRAGON_WALL_HEAD(-1, 5, "SKULL", "SKULL_ITEM"), DRIED_KELP(-1), DRIED_KELP_BLOCK(-1), DRIPSTONE_BLOCK(-1), DROPPER(158), DROWNED_SPAWN_EGG(-1),
    DUNE_ARMOR_TRIM_SMITHING_TEMPLATE(-1), ECHO_SHARD(-1), EGG(344), ELDER_GUARDIAN_SPAWN_EGG(383, 4, "MONSTER_EGG"), ELYTRA(443), EMERALD(388), EMERALD_BLOCK(133), EMERALD_ORE(129),
    ENCHANTED_BOOK(403), ENCHANTED_GOLDEN_APPLE(322, 1, "GOLDEN_APPLE"), ENCHANTING_TABLE(116, "ENCHANTMENT_TABLE"), ENDERMAN_SPAWN_EGG(383, 58, "MONSTER_EGG"),
    ENDERMITE_SPAWN_EGG(383, 67, "MONSTER_EGG"), ENDER_CHEST(130), ENDER_DRAGON_SPAWN_EGG(-1), ENDER_EYE(381, "EYE_OF_ENDER"), ENDER_PEARL(368), END_CRYSTAL(426), END_GATEWAY(209),
    END_PORTAL(119, "ENDER_PORTAL"), END_PORTAL_FRAME(120, "ENDER_PORTAL_FRAME"), END_ROD(198), END_STONE(121, "ENDER_STONE"), END_STONE_BRICKS(206, "END_BRICKS"), END_STONE_BRICK_SLAB(-1),
    END_STONE_BRICK_STAIRS(-1), END_STONE_BRICK_WALL(-1), EVOKER_SPAWN_EGG(383, 34, "MONSTER_EGG"), EXPERIENCE_BOTTLE(384, "EXP_BOTTLE"), EXPLORER_POTTERY_SHERD(-1), EXPOSED_CHISELED_COPPER(-1),
    EXPOSED_COPPER(-1), EXPOSED_COPPER_BULB(-1), EXPOSED_COPPER_DOOR(-1), EXPOSED_COPPER_GRATE(-1), EXPOSED_COPPER_TRAPDOOR(-1), EXPOSED_CUT_COPPER(-1), EXPOSED_CUT_COPPER_SLAB(-1),
    EYE_ARMOR_TRIM_SMITHING_TEMPLATE(-1), EXPOSED_CUT_COPPER_STAIRS(-1), FARMLAND(60, "SOIL"), FEATHER(288), FERMENTED_SPIDER_EYE(376), FERN(31, 2, "LONG_GRASS"),
    /**
     * For some reasons filled map items are really special. Their data value starts
     * from 0 and every time a player creates a new map that maps data value
     * increases. https://github.com/CryptoMorin/XSeries/issues/91
     */
    FILLED_MAP(358, "MAP"), FIRE(51), FIREWORK_ROCKET(401, "FIREWORK"), FIREWORK_STAR(402, "FIREWORK_CHARGE"), FIRE_CHARGE(385, "FIREBALL"), FIRE_CORAL(-1), FIRE_CORAL_BLOCK(-1), FIRE_CORAL_FAN(-1),
    FIRE_CORAL_WALL_FAN(-1), FISHING_ROD(346), FLETCHING_TABLE(-1), FLINT(318), FLINT_AND_STEEL(259), FLOWERING_AZALEA(-1), FLOWERING_AZALEA_LEAVES(-1), FLOWER_BANNER_PATTERN(-1),
    FLOWER_POT(390, "FLOWER_POT", "FLOWER_POT_ITEM"), FLOW_ARMOR_TRIM_SMITHING_TEMPLATE(-1), FLOW_BANNER_PATTERN(-1), FLOW_POTTERY_SHERD(-1), FOX_SPAWN_EGG(-1), FRIEND_POTTERY_SHERD(-1),
    FROGSPAWN(-1), FROG_SPAWN_EGG(-1),
    /**
     * This special material cannot be obtained as an item.
     */
    FROSTED_ICE(212), FURNACE(61, "BURNING_FURNACE"), FURNACE_MINECART(343, "POWERED_MINECART"), GHAST_SPAWN_EGG(383, 56, "MONSTER_EGG"), GHAST_TEAR(370), GILDED_BLACKSTONE(-1), GLASS(20),
    GLASS_BOTTLE(374), GLASS_PANE(102, "THIN_GLASS"), GLISTERING_MELON_SLICE(382, "SPECKLED_MELON"), GLOBE_BANNER_PATTERN(-1), GLOWSTONE(89), GLOWSTONE_DUST(348), GLOW_BERRIES(-1), GLOW_INK_SAC(-1),
    GLOW_ITEM_FRAME(-1), GLOW_LICHEN(-1), GLOW_SQUID_SPAWN_EGG(-1), GOAT_HORN(-1), GOAT_SPAWN_EGG(-1), GOLDEN_APPLE(322), GOLDEN_AXE(286, "GOLD_AXE"), GOLDEN_BOOTS(317, "GOLD_BOOTS"),
    GOLDEN_CARROT(396), GOLDEN_CHESTPLATE(315, "GOLD_CHESTPLATE"), GOLDEN_HELMET(314, "GOLD_HELMET"), GOLDEN_HOE(294, "GOLD_HOE"), GOLDEN_HORSE_ARMOR(418, "GOLD_BARDING"),
    GOLDEN_LEGGINGS(316, "GOLD_LEGGINGS"), GOLDEN_PICKAXE(285, "GOLD_PICKAXE"), GOLDEN_SHOVEL(284, "GOLD_SPADE"), GOLDEN_SWORD(283, "GOLD_SWORD"), GOLD_BLOCK(41), GOLD_INGOT(266), GOLD_NUGGET(371),
    GOLD_ORE(14), GRANITE(1, 1, "STONE"), GRANITE_SLAB(-1), GRANITE_STAIRS(-1), GRANITE_WALL(-1), GRASS_BLOCK(2, "GRASS"), GRAVEL(13), GRAY_BANNER(425, 28, "STANDING_BANNER", "BANNER"),
    GRAY_BED(355, supports(12) ? 7 : 0, "BED_BLOCK", "BED"), GRAY_CANDLE(-1), GRAY_CANDLE_CAKE(-1), GRAY_CARPET(171, 7, "CARPET"), GRAY_CONCRETE(251, 7, "CONCRETE"),
    GRAY_CONCRETE_POWDER(252, 7, "CONCRETE_POWDER"), GRAY_DYE(351, 8, "INK_SACK"), GRAY_GLAZED_TERRACOTTA(242), GRAY_SHULKER_BOX(226), GRAY_STAINED_GLASS(95, 7, "STAINED_GLASS"),
    GRAY_STAINED_GLASS_PANE(160, 7, "THIN_GLASS", "STAINED_GLASS_PANE"), GRAY_TERRACOTTA(159, 7, "STAINED_CLAY"), GRAY_WALL_BANNER(177, 8, "WALL_BANNER"), GRAY_WOOL(35, 7, "WOOL"),
    GREEN_BANNER(425, 2, "STANDING_BANNER", "BANNER"), GREEN_BED(355, supports(12) ? 13 : 0, "BED_BLOCK", "BED"), GREEN_CANDLE(-1), GREEN_CANDLE_CAKE(-1), GREEN_CARPET(171, 13, "CARPET"),
    GREEN_CONCRETE(251, 13, "CONCRETE"), GREEN_CONCRETE_POWDER(252, 13, "CONCRETE_POWDER"),
    /**
     * 1.13 renamed to CACTUS_GREEN 1.14 renamed to GREEN_DYE
     */
    GREEN_DYE(351, 2, "INK_SACK", "CACTUS_GREEN"), GREEN_GLAZED_TERRACOTTA(248), GREEN_SHULKER_BOX(232), GREEN_STAINED_GLASS(95, 13, "STAINED_GLASS"),
    GREEN_STAINED_GLASS_PANE(160, 13, "THIN_GLASS", "STAINED_GLASS_PANE"), GREEN_TERRACOTTA(159, 13, "STAINED_CLAY"), GREEN_WALL_BANNER(177, 2, "WALL_BANNER"), GREEN_WOOL(35, 13, "WOOL"),
    GRINDSTONE(-1), GUARDIAN_SPAWN_EGG(383, "MONSTER_EGG"), GUNPOWDER(289, "SULPHUR"), GUSTER_BANNER_PATTERN(-1), GUSTER_POTTERY_SHERD(-1), HANGING_ROOTS(-1), HAY_BLOCK(170),
    HEARTBREAK_POTTERY_SHERD(-1), HEART_OF_THE_SEA(-1), HEAVY_CORE(-1), HEART_POTTERY_SHERD(-1), HEAVY_WEIGHTED_PRESSURE_PLATE(148, "IRON_PLATE"), HOGLIN_SPAWN_EGG(383, "MONSTER_EGG"), HONEYCOMB(-1),
    HONEYCOMB_BLOCK(-1), HONEY_BLOCK(-1), HONEY_BOTTLE(-1), HOPPER(154), HOPPER_MINECART(408), HORN_CORAL(-1), HORN_CORAL_BLOCK(-1), HORN_CORAL_FAN(-1), HORN_CORAL_WALL_FAN(-1),
    HORSE_SPAWN_EGG(383, 100, "MONSTER_EGG"), HOST_ARMOR_TRIM_SMITHING_TEMPLATE(-1), HOWL_POTTERY_SHERD(-1), HUSK_SPAWN_EGG(383, 23, "MONSTER_EGG"), ICE(79),
    INFESTED_CHISELED_STONE_BRICKS(97, 5, "MONSTER_EGGS"), INFESTED_COBBLESTONE(97, 1, "MONSTER_EGGS"), INFESTED_CRACKED_STONE_BRICKS(97, 4, "MONSTER_EGGS"), INFESTED_DEEPSLATE(-1),
    INFESTED_MOSSY_STONE_BRICKS(97, 3, "MONSTER_EGGS"), INFESTED_STONE(97, "MONSTER_EGGS"), INFESTED_STONE_BRICKS(97, 2, "MONSTER_EGGS"),
    /**
     * We will only add "INK_SAC" for {@link #BLACK_DYE} since it's the only
     * material (linked with this material) that is added after 1.13, which means it
     * can use both INK_SACK and INK_SAC.
     */
    INK_SAC(351, "INK_SACK"), IRON_AXE(258), IRON_BARS(101, "IRON_FENCE"), IRON_BLOCK(42), IRON_BOOTS(309), IRON_CHESTPLATE(307), IRON_DOOR(330, "IRON_DOOR_BLOCK"), IRON_GOLEM_SPAWN_EGG(-1),
    IRON_HELMET(306), IRON_HOE(292), IRON_HORSE_ARMOR(417, "IRON_BARDING"), IRON_INGOT(265), IRON_LEGGINGS(308), IRON_NUGGET(452), IRON_ORE(15), IRON_PICKAXE(257), IRON_SHOVEL(256, "IRON_SPADE"),
    IRON_SWORD(267), IRON_TRAPDOOR(167), ITEM_FRAME(389), JACK_O_LANTERN(91), JIGSAW(-1), JUKEBOX(84), JUNGLE_BOAT(446, "BOAT_JUNGLE"), JUNGLE_BUTTON(-1, "WOOD_BUTTON"), JUNGLE_CHEST_BOAT(-1),
    JUNGLE_DOOR(429, "JUNGLE_DOOR", "JUNGLE_DOOR_ITEM"), JUNGLE_FENCE(190), JUNGLE_FENCE_GATE(185), JUNGLE_HANGING_SIGN(-1), JUNGLE_LEAVES(18, 3, "LEAVES"), JUNGLE_LOG(17, 3, "LOG"),
    JUNGLE_PLANKS(5, 3, "WOOD"), JUNGLE_PRESSURE_PLATE(-1, "WOOD_PLATE"), JUNGLE_SAPLING(6, 3, "SAPLING"), JUNGLE_SIGN(-1, "SIGN_POST", "SIGN"),
    JUNGLE_SLAB(-1, 3, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), JUNGLE_STAIRS(136, "JUNGLE_WOOD_STAIRS"), JUNGLE_TRAPDOOR(-1, "TRAP_DOOR"), JUNGLE_WALL_HANGING_SIGN(-1),
    JUNGLE_WALL_SIGN(-1, "WALL_SIGN"), JUNGLE_WOOD(-1, 3, "LOG"), KELP(-1), KELP_PLANT(-1), KNOWLEDGE_BOOK(Ref.isNewerThan(11) ? 453 : -1, "BOOK"), LADDER(65), LANTERN(-1), LAPIS_BLOCK(22),
    LAPIS_LAZULI(351, 4, "INK_SACK"), LAPIS_ORE(21), LARGE_AMETHYST_BUD(-1), LARGE_FERN(175, 3, "DOUBLE_PLANT"), LAVA(10, "STATIONARY_LAVA"), LAVA_BUCKET(327), LAVA_CAULDRON(-1), LEAD(420, "LEASH"),
    LEATHER(334), LEATHER_BOOTS(301), LEATHER_CHESTPLATE(299), LEATHER_HELMET(298), LEATHER_HORSE_ARMOR(-1, "IRON_HORSE_ARMOR"), LEATHER_LEGGINGS(300), LECTERN(-1), LEVER(69), LIGHT(-1),
    LIGHTNING_ROD(-1), LIGHT_BLUE_BANNER(425, 12, "STANDING_BANNER", "BANNER"), LIGHT_BLUE_BED(355, supports(12) ? 3 : 0, "BED_BLOCK", "BED"), LIGHT_BLUE_CANDLE(-1), LIGHT_BLUE_CANDLE_CAKE(-1),
    LIGHT_BLUE_CARPET(171, 3, "CARPET"), LIGHT_BLUE_CONCRETE(251, 3, "CONCRETE"), LIGHT_BLUE_CONCRETE_POWDER(252, 3, "CONCRETE_POWDER"), LIGHT_BLUE_DYE(351, 12, "INK_SACK"),
    LIGHT_BLUE_GLAZED_TERRACOTTA(238), LIGHT_BLUE_SHULKER_BOX(222), LIGHT_BLUE_STAINED_GLASS(95, 3, "STAINED_GLASS"), LIGHT_BLUE_STAINED_GLASS_PANE(160, 3, "THIN_GLASS", "STAINED_GLASS_PANE"),
    LIGHT_BLUE_TERRACOTTA(159, 3, "STAINED_CLAY"), LIGHT_BLUE_WALL_BANNER(425, 12, "WALL_BANNER", "STANDING_BANNER", "BANNER"), LIGHT_BLUE_WOOL(35, 3, "WOOL"),
    LIGHT_GRAY_BANNER(425, 7, "STANDING_BANNER", "BANNER"), LIGHT_GRAY_BED(355, supports(12) ? 8 : 0, "BED_BLOCK", "BED"), LIGHT_GRAY_CANDLE(-1), LIGHT_GRAY_CANDLE_CAKE(-1),
    LIGHT_GRAY_CARPET(171, 8, "CARPET"), LIGHT_GRAY_CONCRETE(251, 8, "CONCRETE"), LIGHT_GRAY_CONCRETE_POWDER(252, 8, "CONCRETE_POWDER"), LIGHT_GRAY_DYE(351, 7, "INK_SACK"),
    /**
     * Renamed to SILVER_GLAZED_TERRACOTTA in 1.12 Renamed to
     * LIGHT_GRAY_GLAZED_TERRACOTTA in 1.14
     */
    LIGHT_GRAY_GLAZED_TERRACOTTA(243, "SILVER_GLAZED_TERRACOTTA"), LIGHT_GRAY_SHULKER_BOX(227, "SILVER_SHULKER_BOX"), LIGHT_GRAY_STAINED_GLASS(95, 8, "STAINED_GLASS"),
    LIGHT_GRAY_STAINED_GLASS_PANE(160, 8, "THIN_GLASS", "STAINED_GLASS_PANE"), LIGHT_GRAY_TERRACOTTA(159, 8, "STAINED_CLAY"), LIGHT_GRAY_WALL_BANNER(177, 7, "WALL_BANNER"),
    LIGHT_GRAY_WOOL(35, 8, "WOOL"), LIGHT_WEIGHTED_PRESSURE_PLATE(147, "GOLD_PLATE"), LILAC(175, 1, "DOUBLE_PLANT"), LILY_OF_THE_VALLEY(-1), LILY_PAD(111, "WATER_LILY"),
    LIME_BANNER(425, 10, "STANDING_BANNER", "BANNER"), LIME_BED(355, supports(12) ? 5 : 0, "BED_BLOCK", "BED"), LIME_CANDLE(-1), LIME_CANDLE_CAKE(-1), LIME_CARPET(171, 5, "CARPET"),
    LIME_CONCRETE(251, 5, "CONCRETE"), LIME_CONCRETE_POWDER(252, 5, "CONCRETE_POWDER"), LIME_DYE(351, 10, "INK_SACK"), LIME_GLAZED_TERRACOTTA(240), LIME_SHULKER_BOX(224),
    LIME_STAINED_GLASS(95, 5, "STAINED_GLASS"), LIME_STAINED_GLASS_PANE(160, 5, "STAINED_GLASS_PANE"), LIME_TERRACOTTA(159, 5, "STAINED_CLAY"), LIME_WALL_BANNER(177, 10, "WALL_BANNER"),
    LIME_WOOL(35, 5, "WOOL"), LINGERING_POTION(441), LLAMA_SPAWN_EGG(383, 103, "MONSTER_EGG"), LODESTONE(-1), LOOM(-1), MACE(-1), MAGENTA_BANNER(425, 13, "STANDING_BANNER", "BANNER"),
    MAGENTA_BED(355, supports(12) ? 2 : 0, "BED_BLOCK", "BED"), MAGENTA_CANDLE(-1), MAGENTA_CANDLE_CAKE(-1), MAGENTA_CARPET(171, 2, "CARPET"), MAGENTA_CONCRETE(251, 2, "CONCRETE"),
    MAGENTA_CONCRETE_POWDER(252, 2, "CONCRETE_POWDER"), MAGENTA_DYE(351, 13, "INK_SACK"), MAGENTA_GLAZED_TERRACOTTA(237), MAGENTA_SHULKER_BOX(221), MAGENTA_STAINED_GLASS(95, 2, "STAINED_GLASS"),
    MAGENTA_STAINED_GLASS_PANE(160, 2, "THIN_GLASS", "STAINED_GLASS_PANE"), MAGENTA_TERRACOTTA(159, 2, "STAINED_CLAY"), MAGENTA_WALL_BANNER(177, 13, "WALL_BANNER"), MAGENTA_WOOL(35, 2, "WOOL"),
    MAGMA_BLOCK(213, "MAGMA"), MAGMA_CREAM(378), MAGMA_CUBE_SPAWN_EGG(383, 62, "MONSTER_EGG"), MANGROVE_BOAT(-1), MANGROVE_BUTTON(-1), MANGROVE_CHEST_BOAT(-1), MANGROVE_DOOR(-1), MANGROVE_FENCE(-1),
    MANGROVE_FENCE_GATE(-1), MANGROVE_HANGING_SIGN(-1), MANGROVE_LEAVES(-1), MANGROVE_LOG(-1), MANGROVE_PLANKS(-1), MANGROVE_PRESSURE_PLATE(-1), MANGROVE_PROPAGULE(-1), MANGROVE_ROOTS(-1),
    MANGROVE_SIGN(-1), MANGROVE_SLAB(-1), MANGROVE_STAIRS(-1), MANGROVE_TRAPDOOR(-1), MANGROVE_WALL_HANGING_SIGN(-1), MANGROVE_WALL_SIGN(-1), MANGROVE_WOOD(-1),
    /**
     * Adding this to the duplicated list will give you a filled map for 1.13+
     * versions and removing it from duplicated list will still give you a filled
     * map in -1.12 versions. Since higher versions are our priority I'll keep 1.13+
     * support until I can come up with something to fix it.
     */
    MAP(395, "EMPTY_MAP"), MEDIUM_AMETHYST_BUD(-1), MELON(103, "MELON_BLOCK"), MELON_SEEDS(362), MELON_SLICE(360, "MELON"), MELON_STEM(105), MILK_BUCKET(335), MINECART(328), MINER_POTTERY_SHERD(-1),
    MOJANG_BANNER_PATTERN(-1), MOOSHROOM_SPAWN_EGG(383, 96, "MONSTER_EGG"), MOSSY_COBBLESTONE(48), MOSSY_COBBLESTONE_SLAB(139), MOSSY_COBBLESTONE_STAIRS(98),
    MOSSY_COBBLESTONE_WALL(-1, 1, "COBBLE_WALL", "COBBLESTONE_WALL"), MOSSY_STONE_BRICKS(-1, 1, "SMOOTH_BRICK"), MOSSY_STONE_BRICK_SLAB(-1), MOSSY_STONE_BRICK_STAIRS(-1), MOSSY_STONE_BRICK_WALL(-1),
    MOSS_BLOCK(-1), MOSS_CARPET(-1), MOURNER_POTTERY_SHERD(-1), MOVING_PISTON(36, "PISTON_MOVING_PIECE"), MUD(-1), MUDDY_MANGROVE_ROOTS(-1), MUD_BRICKS(-1), MUD_BRICK_SLAB(-1), MUD_BRICK_STAIRS(-1),
    MUD_BRICK_WALL(-1), MULE_SPAWN_EGG(383, 32, "MONSTER_EGG"), MUSHROOM_STEM(39, "BROWN_MUSHROOM"), MUSHROOM_STEW(282, "MUSHROOM_SOUP"), MUSIC_DISC_11(2266, "RECORD_11"),
    MUSIC_DISC_13(2256, "GOLD_RECORD"), MUSIC_DISC_5(-1), MUSIC_DISC_BLOCKS(2258, "RECORD_3"), MUSIC_DISC_CAT(2257, "GREEN_RECORD"), MUSIC_DISC_CHIRP(2259, "RECORD_4"),
    MUSIC_DISC_FAR(2260, "RECORD_5"), MUSIC_DISC_MALL(2261, "RECORD_6"), MUSIC_DISC_MELLOHI(2262, "RECORD_7"), MUSIC_DISC_OTHERSIDE(-1), MUSIC_DISC_PIGSTEP(-1), MUSIC_DISC_STAL(2263, "RECORD_8"),
    MUSIC_DISC_STRAD(2264, "RECORD_9"), MUSIC_DISC_WAIT(2267, "RECORD_12"), MUSIC_DISC_WARD(2265, "RECORD_10"), MUSIC_DISC_RELIC(-1), MUSIC_DISC_CREATOR(-1), MUSIC_DISC_PRECIPICE(-1),
    MUSIC_DISC_CREATOR_MUSIC_BOX(-1), MUTTON(423), MYCELIUM(110, "MYCEL"), NAME_TAG(421), NAUTILUS_SHELL(-1), NETHERITE_AXE(-1), NETHERITE_BLOCK(-1), NETHERITE_BOOTS(-1), NETHERITE_CHESTPLATE(-1),
    NETHERITE_HELMET(-1), NETHERITE_HOE(-1), NETHERITE_INGOT(-1), NETHERITE_LEGGINGS(-1), NETHERITE_PICKAXE(-1), NETHERITE_SCRAP(-1), NETHERITE_SHOVEL(-1), NETHERITE_SWORD(-1),
    NETHERITE_UPGRADE_SMITHING_TEMPLATE(-1), NETHERRACK(87), NETHER_BRICK(405, "NETHER_BRICK_ITEM"), NETHER_BRICKS(112, "NETHER_BRICK"), NETHER_BRICK_FENCE(113, "NETHER_FENCE"),
    NETHER_BRICK_SLAB(44, 6, "STEP"), NETHER_BRICK_STAIRS(114), NETHER_BRICK_WALL(-1), NETHER_GOLD_ORE(-1), NETHER_PORTAL(90, "PORTAL"), NETHER_QUARTZ_ORE(153, "QUARTZ_ORE"), NETHER_SPROUTS(-1),
    NETHER_STAR(399),
    /**
     * Just like mentioned in https://minecraft.gamepedia.com/Nether_Wart Nether
     * wart is also known as nether stalk in the code. NETHER_STALK is the planted
     * state of nether warts.
     */
    NETHER_WART(372, "NETHER_WARTS", "NETHER_STALK"), NETHER_WART_BLOCK(214), NOTE_BLOCK(25), OAK_BOAT(333, "BOAT"), OAK_BUTTON(143, "WOOD_BUTTON"), OAK_CHEST_BOAT(-1),
    OAK_DOOR(324, "WOODEN_DOOR", "WOOD_DOOR"), OAK_FENCE(85, "FENCE"), OAK_FENCE_GATE(107, "FENCE_GATE"), OAK_HANGING_SIGN(-1), OAK_LEAVES(18, "LEAVES"), OAK_LOG(17, "LOG"), OAK_PLANKS(5, "WOOD"),
    OAK_PRESSURE_PLATE(72, "WOOD_PLATE"), OAK_SAPLING(6, "SAPLING"), OAK_SIGN(323, "SIGN_POST", "SIGN"), OAK_SLAB(126, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), OAK_STAIRS(53, "WOOD_STAIRS"),
    OAK_TRAPDOOR(96, "TRAP_DOOR"), OAK_WALL_HANGING_SIGN(-1), OAK_WALL_SIGN(68, "WALL_SIGN"), OAK_WOOD(-1, "LOG"), OBSERVER(218), OBSIDIAN(49), OCELOT_SPAWN_EGG(383, 98, "MONSTER_EGG"),
    OCHRE_FROGLIGHT(-1), OMINOUS_BOTTLE(-1), OMINOUS_TRIAL_KEY(-1), ORANGE_BANNER(425, 14, "STANDING_BANNER", "BANNER"), ORANGE_BED(355, supports(12) ? 1 : 0, "BED_BLOCK", "BED"), ORANGE_CANDLE(-1),
    ORANGE_CANDLE_CAKE(-1), ORANGE_CARPET(171, 1, "CARPET"), ORANGE_CONCRETE(251, 1, "CONCRETE"), ORANGE_CONCRETE_POWDER(252, 1, "CONCRETE_POWDER"), ORANGE_DYE(351, 14, "INK_SACK"),
    ORANGE_GLAZED_TERRACOTTA(236), ORANGE_SHULKER_BOX(220), ORANGE_STAINED_GLASS(95, 1, "STAINED_GLASS"), ORANGE_STAINED_GLASS_PANE(160, 1, "STAINED_GLASS_PANE"),
    ORANGE_TERRACOTTA(159, 1, "STAINED_CLAY"), ORANGE_TULIP(38, 5, "RED_ROSE"), ORANGE_WALL_BANNER(177, 14, "WALL_BANNER"), ORANGE_WOOL(35, 1, "WOOL"), OXEYE_DAISY(38, 8, "RED_ROSE"),
    OXIDIZED_CHISELED_COPPER(-1), OXIDIZED_COPPER(-1), OXIDIZED_COPPER_BULB(-1), OXIDIZED_COPPER_DOOR(-1), OXIDIZED_COPPER_GRATE(-1), OXIDIZED_COPPER_TRAPDOOR(-1), OXIDIZED_CUT_COPPER(-1),
    OXIDIZED_CUT_COPPER_SLAB(-1), OXIDIZED_CUT_COPPER_STAIRS(-1), PACKED_ICE(174), PACKED_MUD(-1), PAINTING(321), PANDA_SPAWN_EGG(-1), PAPER(339), PARROT_SPAWN_EGG(383, 105, "MONSTER_EGG"),
    PEARLESCENT_FROGLIGHT(-1), PEONY(175, 5, "DOUBLE_PLANT"), PETRIFIED_OAK_SLAB(126, "WOOD_STEP"), PHANTOM_MEMBRANE(-1), PHANTOM_SPAWN_EGG(-1), PIGLIN_BANNER_PATTERN(-1), PIGLIN_BRUTE_SPAWN_EGG(-1),
    PIGLIN_HEAD(-1), PIGLIN_SPAWN_EGG(-1, 57, "MONSTER_EGG"), PIGLIN_WALL_HEAD(-1), PIG_SPAWN_EGG(383, 90, "MONSTER_EGG"), PILLAGER_SPAWN_EGG(-1), PINK_BANNER(425, 9, "STANDING_BANNER", "BANNER"),
    PINK_BED(355, supports(12) ? 6 : 0, "BED_BLOCK", "BED"), PINK_CANDLE(-1), PINK_CANDLE_CAKE(-1), PINK_CARPET(171, 6, "CARPET"), PINK_CONCRETE(251, 6, "CONCRETE"),
    PINK_CONCRETE_POWDER(252, 6, "CONCRETE_POWDER"), PINK_DYE(351, 9, "INK_SACK"), PINK_GLAZED_TERRACOTTA(241), PINK_PETALS(-1), PINK_SHULKER_BOX(225), PINK_STAINED_GLASS(95, 6, "STAINED_GLASS"),
    PINK_STAINED_GLASS_PANE(160, 6, "THIN_GLASS", "STAINED_GLASS_PANE"), PINK_TERRACOTTA(159, 6, "STAINED_CLAY"), PINK_TULIP(38, 7, "RED_ROSE"), PINK_WALL_BANNER(177, 9, "WALL_BANNER"),
    PINK_WOOL(35, 6, "WOOL"), PISTON(33, "PISTON_BASE"), PISTON_HEAD(34, "PISTON_EXTENSION"), PITCHER_CROP(-1), PITCHER_PLANT(-1), PITCHER_POD(-1), PLAYER_HEAD(397, 3, "SKULL", "SKULL_ITEM"),
    PLAYER_WALL_HEAD(-1, 3, "SKULL", "SKULL_ITEM"), PLENTY_POTTERY_SHERD(-1), PODZOL(3, 2, "DIRT"), POINTED_DRIPSTONE(-1), POISONOUS_POTATO(394), POLAR_BEAR_SPAWN_EGG(383, 102, "MONSTER_EGG"),
    POLISHED_ANDESITE(1, 6, "STONE"), POLISHED_TUFF(-1), POLISHED_TUFF_SLAB(-1), POLISHED_TUFF_STAIRS(-1), POLISHED_TUFF_WALL(-1), POLISHED_ANDESITE_SLAB(-1), POLISHED_ANDESITE_STAIRS(-1),
    POLISHED_BASALT(-1), POLISHED_BLACKSTONE(-1), POLISHED_BLACKSTONE_BRICKS(-1), POLISHED_BLACKSTONE_BRICK_SLAB(-1), POLISHED_BLACKSTONE_BRICK_STAIRS(-1), POLISHED_BLACKSTONE_BRICK_WALL(-1),
    POLISHED_BLACKSTONE_BUTTON(-1), POLISHED_BLACKSTONE_PRESSURE_PLATE(-1), POLISHED_BLACKSTONE_SLAB(-1), POLISHED_BLACKSTONE_STAIRS(-1), POLISHED_BLACKSTONE_WALL(-1), POLISHED_DEEPSLATE(-1),
    POLISHED_DEEPSLATE_SLAB(-1), POLISHED_DEEPSLATE_STAIRS(-1), POLISHED_DEEPSLATE_WALL(-1), POLISHED_DIORITE(1, 4, "STONE"), POLISHED_DIORITE_SLAB(-1), POLISHED_DIORITE_STAIRS(-1),
    POLISHED_GRANITE(1, 2, "STONE"), POLISHED_GRANITE_SLAB(-1), POLISHED_GRANITE_STAIRS(-1), POPPED_CHORUS_FRUIT(433, "CHORUS_FRUIT_POPPED"), POPPY(38, "RED_ROSE"), PORKCHOP(319, "PORK"),
    POTATO(392, "POTATO_ITEM"), POTATOES(142, "POTATO"), POTION(373), POTTED_ACACIA_SAPLING(140, 4, "FLOWER_POT"), POTTED_ALLIUM(140, 2, "FLOWER_POT"), POTTED_AZALEA_BUSH(-1),
    POTTED_AZURE_BLUET(140, 3, "FLOWER_POT"), POTTED_BAMBOO(-1), POTTED_BIRCH_SAPLING(140, 2, "FLOWER_POT"), POTTED_BLUE_ORCHID(140, 1, "FLOWER_POT"), POTTED_BROWN_MUSHROOM(140, "FLOWER_POT"),
    POTTED_CACTUS(140, "FLOWER_POT"), POTTED_CORNFLOWER(-1), POTTED_CRIMSON_FUNGUS(-1), POTTED_CRIMSON_ROOTS(-1), POTTED_DANDELION(140, "FLOWER_POT"), POTTED_DARK_OAK_SAPLING(140, 5, "FLOWER_POT"),
    POTTED_DEAD_BUSH(140, "FLOWER_POT"), POTTED_FERN(140, 2, "FLOWER_POT"), POTTED_FLOWERING_AZALEA_BUSH(-1), POTTED_JUNGLE_SAPLING(140, 3, "FLOWER_POT"), POTTED_LILY_OF_THE_VALLEY(-1),
    POTTED_MANGROVE_PROPAGULE(-1), POTTED_OAK_SAPLING(140, "FLOWER_POT"), POTTED_ORANGE_TULIP(140, 5, "FLOWER_POT"), POTTED_OXEYE_DAISY(140, 8, "FLOWER_POT"), POTTED_PINK_TULIP(140, 7, "FLOWER_POT"),
    POTTED_POPPY(140, "FLOWER_POT"), POTTED_RED_MUSHROOM(140, "FLOWER_POT"), POTTED_RED_TULIP(140, 4, "FLOWER_POT"), POTTED_SPRUCE_SAPLING(140, 1, "FLOWER_POT"), POTTED_WARPED_FUNGUS(-1),
    POTTED_WARPED_ROOTS(-1), POTTED_WHITE_TULIP(140, 6, "FLOWER_POT"), POTTED_WITHER_ROSE(-1), POTTED_TORCHFLOWER(-1), POTTERY_SHARD_ARCHER(-1), POTTERY_SHARD_ARMS_UP(-1), POTTERY_SHARD_PRIZE(-1),
    POTTERY_SHARD_SKULL(-1), POTTED_CHERRY_SAPLING(-1), POWDER_SNOW(-1), POWDER_SNOW_BUCKET(-1), POWDER_SNOW_CAULDRON(-1), POWERED_RAIL(27), PRISMARINE(168), PRISMARINE_BRICKS(168, 1, "PRISMARINE"),
    PRISMARINE_BRICK_SLAB(-1), PRISMARINE_BRICK_STAIRS(-1), PRISMARINE_CRYSTALS(410), PRISMARINE_SHARD(409), PRISMARINE_SLAB(-1), PRISMARINE_STAIRS(-1), PRISMARINE_WALL(-1), PRIZE_POTTERY_SHERD(-1),
    PUFFERFISH(349, 3, "RAW_FISH"), PUFFERFISH_BUCKET(-1), PUFFERFISH_SPAWN_EGG(-1), PUMPKIN(86), PUMPKIN_PIE(400), PUMPKIN_SEEDS(361), PUMPKIN_STEM(104),
    PURPLE_BANNER(425, 5, "STANDING_BANNER", "BANNER"), PURPLE_BED(355, supports(12) ? 10 : 0, "BED_BLOCK", "BED"), PURPLE_CANDLE(-1), PURPLE_CANDLE_CAKE(-1), PURPLE_CARPET(171, 10, "CARPET"),
    PURPLE_CONCRETE(251, 10, "CONCRETE"), PURPLE_CONCRETE_POWDER(252, 10, "CONCRETE_POWDER"), PURPLE_DYE(351, 5, "INK_SACK"), PURPLE_GLAZED_TERRACOTTA(245), PURPLE_SHULKER_BOX(229),
    PURPLE_STAINED_GLASS(95, 10, "STAINED_GLASS"), PURPLE_STAINED_GLASS_PANE(160, 10, "THIN_GLASS", "STAINED_GLASS_PANE"), PURPLE_TERRACOTTA(159, 10, "STAINED_CLAY"),
    PURPLE_WALL_BANNER(177, 5, "WALL_BANNER"), PURPLE_WOOL(35, 10, "WOOL"), PURPUR_BLOCK(201), PURPUR_PILLAR(202), PURPUR_SLAB(205, "PURPUR_DOUBLE_SLAB"), PURPUR_STAIRS(203), QUARTZ(406),
    QUARTZ_BLOCK(155), QUARTZ_BRICKS(-1), QUARTZ_PILLAR(155, 2, "QUARTZ_BLOCK"), QUARTZ_SLAB(44, 7, "STEP"), QUARTZ_STAIRS(156), RABBIT(411), RABBIT_FOOT(414), RABBIT_HIDE(415),
    RABBIT_SPAWN_EGG(383, 101, "MONSTER_EGG"), RABBIT_STEW(413), RAIL(66, "RAILS"), RAISER_ARMOR_TRIM_SMITHING_TEMPLATE(-1), RAVAGER_SPAWN_EGG(-1), RAW_COPPER(-1), RAW_COPPER_BLOCK(-1), RAW_GOLD(-1),
    RAW_GOLD_BLOCK(-1), RAW_IRON(-1), RAW_IRON_BLOCK(-1), RECOVERY_COMPASS(-1), REDSTONE(331), REDSTONE_BLOCK(152),
    /**
     * Unlike redstone torch, REDSTONE_LAMP_ON isn't an item. The name is just here
     * on the list for matching.
     *
     * @see #REDSTONE_TORCH
     */
    REDSTONE_LAMP(123, "REDSTONE_LAMP_ON", "REDSTONE_LAMP_OFF"), REDSTONE_ORE(73, "GLOWING_REDSTONE_ORE"),
    /**
     * REDSTONE_TORCH_OFF isn't an item, but a block. But REDSTONE_TORCH_ON is the
     * item. The name is just here on the list for matching.
     */
    REDSTONE_TORCH(76, "REDSTONE_TORCH_OFF", "REDSTONE_TORCH_ON"), REDSTONE_WALL_TORCH(-1), REDSTONE_WIRE(55), RED_BANNER(425, 1, "STANDING_BANNER", "BANNER"),
    /**
     * Data value 14 or 0
     */
    RED_BED(355, supports(12) ? 14 : 0, "BED_BLOCK", "BED"), RED_CANDLE(-1), RED_CANDLE_CAKE(-1), RED_CARPET(171, 14, "CARPET"), RED_CONCRETE(251, 14, "CONCRETE"),
    RED_CONCRETE_POWDER(252, 14, "CONCRETE_POWDER"),
    /**
     * 1.13 renamed to ROSE_RED 1.14 renamed to RED_DYE
     */
    RED_DYE(351, 1, "INK_SACK", "ROSE_RED"), RED_GLAZED_TERRACOTTA(249), RED_MUSHROOM(40), RED_MUSHROOM_BLOCK(100, "RED_MUSHROOM", "HUGE_MUSHROOM_2"), RED_NETHER_BRICKS(215, "RED_NETHER_BRICK"),
    RED_NETHER_BRICK_SLAB(-1), RED_NETHER_BRICK_STAIRS(-1), RED_NETHER_BRICK_WALL(-1), RED_SAND(12, 1, "SAND"), RED_SANDSTONE(179), RED_SANDSTONE_SLAB(182, "DOUBLE_STONE_SLAB2", "STONE_SLAB2"),
    RED_SANDSTONE_STAIRS(180), RED_SANDSTONE_WALL(-1), RED_SHULKER_BOX(233), RED_STAINED_GLASS(95, 14, "STAINED_GLASS"), RED_STAINED_GLASS_PANE(160, 14, "THIN_GLASS", "STAINED_GLASS_PANE"),
    RED_TERRACOTTA(159, 14, "STAINED_CLAY"), RED_TULIP(38, 4, "RED_ROSE"), RED_WALL_BANNER(177, 1, "WALL_BANNER"), RED_WOOL(35, 14, "WOOL"), REINFORCED_DEEPSLATE(-1),
    REPEATER(356, "DIODE_BLOCK_ON", "DIODE_BLOCK_OFF", "DIODE"), REPEATING_COMMAND_BLOCK(Ref.isNewerThan(8) ? 210 : -1, "COMMAND", "COMMAND_REPEATING"), RESPAWN_ANCHOR(-1),
    RIB_ARMOR_TRIM_SMITHING_TEMPLATE(-1), ROOTED_DIRT(-1), ROSE_BUSH(175, 4, "DOUBLE_PLANT"), ROTTEN_FLESH(367), SADDLE(329), SALMON(349, 1, "RAW_FISH"), SALMON_BUCKET(-1), SALMON_SPAWN_EGG(-1),
    SAND(12), SANDSTONE(24), SANDSTONE_SLAB(44, 1, "DOUBLE_STEP", "STEP", "STONE_SLAB"), SANDSTONE_STAIRS(128), SANDSTONE_WALL(-1), SCAFFOLDING(-1), SCRAPE_POTTERY_SHERD(-1), SCULK(-1),
    SCULK_CATALYST(-1), SCULK_SENSOR(-1), SCULK_SHRIEKER(-1), SCULK_VEIN(-1), SCUTE(-1), SEAGRASS(-1), SEA_LANTERN(169), SEA_PICKLE(-1), SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE(-1),
    SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE(-1), SHEAF_POTTERY_SHERD(-1), SHEARS(359), SHELTER_POTTERY_SHERD(-1), SHEEP_SPAWN_EGG(383, 91, "MONSTER_EGG"), SHIELD(442),
    /**
     * 1.13.0: LONG_GRASS:1 1.20.4: GRASS -> SHORT_GRASS
     */
    SHORT_GRASS(31, 1, "GRASS", "LONG_GRASS"), SHROOMLIGHT(-1), SHULKER_BOX(229, "PURPLE_SHULKER_BOX"), SHULKER_SHELL(450), SHULKER_SPAWN_EGG(383, 69, "MONSTER_EGG"),
    SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE(-1), SILVERFISH_SPAWN_EGG(383, 60, "MONSTER_EGG"), SKELETON_HORSE_SPAWN_EGG(383, 28, "MONSTER_EGG"), SKELETON_SKULL(397, "SKULL", "SKULL_ITEM"),
    SKELETON_SPAWN_EGG(383, 51, "MONSTER_EGG"), SKELETON_WALL_SKULL(-1, "SKULL", "SKULL_ITEM"), SKULL_BANNER_PATTERN(-1), SKULL_POTTERY_SHERD(-1), SLIME_BALL(341), SLIME_BLOCK(165),
    SLIME_SPAWN_EGG(383, 55, "MONSTER_EGG"), SMALL_AMETHYST_BUD(-1), SMALL_DRIPLEAF(-1), SMITHING_TABLE(-1), SMOKER(-1), SMOOTH_BASALT(-1), SMOOTH_QUARTZ(-1), SMOOTH_QUARTZ_SLAB(-1),
    SMOOTH_QUARTZ_STAIRS(-1), SMOOTH_RED_SANDSTONE(179, 2, "RED_SANDSTONE"), SMOOTH_RED_SANDSTONE_SLAB(182, "STONE_SLAB2"), SMOOTH_RED_SANDSTONE_STAIRS(-1), SMOOTH_SANDSTONE(24, 2, "SANDSTONE"),
    SMOOTH_SANDSTONE_SLAB(-1), SMOOTH_SANDSTONE_STAIRS(-1), SMOOTH_STONE(-1), SMOOTH_STONE_SLAB(-1), SNIFFER_EGG(-1), SNIFFER_SPAWN_EGG(-1), SNORT_POTTERY_SHERD(-1),
    SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE(-1), SNOW(78), SNOWBALL(332, "SNOW_BALL"), SNOW_BLOCK(80), SNOW_GOLEM_SPAWN_EGG(-1), SOUL_CAMPFIRE(-1), SOUL_FIRE(-1), SOUL_LANTERN(-1), SOUL_SAND(88),
    SOUL_SOIL(-1), SOUL_TORCH(-1), SOUL_WALL_TORCH(-1), SPAWNER(52, "MOB_SPAWNER"), SPECTRAL_ARROW(439), SPIDER_EYE(375), SPIDER_SPAWN_EGG(383, 52, "MONSTER_EGG"),
    SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE(-1), SPLASH_POTION(Ref.isNewerThan(8) ? 438 : -1, "POTION"), SPONGE(19), SPORE_BLOSSOM(-1), SPRUCE_BOAT(444, "BOAT_SPRUCE"), SPRUCE_BUTTON(-1, "WOOD_BUTTON"),
    SPRUCE_CHEST_BOAT(-1), SPRUCE_DOOR(427, "SPRUCE_DOOR", "SPRUCE_DOOR_ITEM"), SPRUCE_FENCE(188), SPRUCE_FENCE_GATE(183), SPRUCE_HANGING_SIGN(-1), SPRUCE_LEAVES(18, 1, "LEAVES"),
    SPRUCE_LOG(17, 1, "LOG"), SPRUCE_PLANKS(5, 1, "WOOD"), SPRUCE_PRESSURE_PLATE(-1, "WOOD_PLATE"), SPRUCE_SAPLING(6, 1, "SAPLING"), SPRUCE_SIGN(-1, "SIGN_POST", "SIGN"),
    SPRUCE_SLAB(126, 1, "WOOD_DOUBLE_STEP", "WOOD_STEP", "WOODEN_SLAB"), SPRUCE_STAIRS(134, "SPRUCE_WOOD_STAIRS"), SPRUCE_TRAPDOOR(-1, "TRAP_DOOR"), SPRUCE_WALL_HANGING_SIGN(-1),
    SPRUCE_WALL_SIGN(-1, "WALL_SIGN"), SPRUCE_WOOD(-1, 1, "LOG"), SPYGLASS(-1), SQUID_SPAWN_EGG(383, 94, "MONSTER_EGG"), STICK(280), STICKY_PISTON(29, "PISTON_BASE", "PISTON_STICKY_BASE"), STONE(1),
    STONECUTTER(-1), STONE_AXE(275), STONE_BRICKS(98, "SMOOTH_BRICK"), STONE_BRICK_SLAB(44, 5, "DOUBLE_STEP", "STEP", "STONE_SLAB"), STONE_BRICK_STAIRS(109, "SMOOTH_STAIRS"), STONE_BRICK_WALL(-1),
    STONE_BUTTON(77), STONE_HOE(291), STONE_PICKAXE(274), STONE_PRESSURE_PLATE(70, "STONE_PLATE"), STONE_SHOVEL(273, "STONE_SPADE"), STONE_SLAB(44, "DOUBLE_STEP", "STEP"), STONE_STAIRS(-1),
    STONE_SWORD(272), STRAY_SPAWN_EGG(383, 6, "MONSTER_EGG"), STRIDER_SPAWN_EGG(-1), STRING(287), STRIPPED_ACACIA_LOG(-1), STRIPPED_ACACIA_WOOD(-1), STRIPPED_BAMBOO_BLOCK(-1), STRIPPED_BIRCH_LOG(-1),
    STRIPPED_BIRCH_WOOD(-1), STRIPPED_CRIMSON_HYPHAE(-1), STRIPPED_CRIMSON_STEM(-1), STRIPPED_DARK_OAK_LOG(-1), STRIPPED_DARK_OAK_WOOD(-1), STRIPPED_JUNGLE_LOG(-1), STRIPPED_JUNGLE_WOOD(-1),
    STRIPPED_MANGROVE_LOG(-1), STRIPPED_MANGROVE_WOOD(-1), STRIPPED_OAK_LOG(-1), STRIPPED_OAK_WOOD(-1), STRIPPED_SPRUCE_LOG(-1), STRIPPED_SPRUCE_WOOD(-1), STRIPPED_WARPED_HYPHAE(-1),
    STRIPPED_WARPED_STEM(-1), STRIPPED_CHERRY_LOG(-1), STRIPPED_CHERRY_WOOD(-1), STRUCTURE_BLOCK(255),
    /**
     * Originally developers used barrier blocks for its purpose. So technically
     * this isn't really considered as a suggested material.
     */
    STRUCTURE_VOID(Ref.isNewerThan(9) ? 217 : -1, 10, "BARRIER"), SUGAR(353),
    /**
     * Sugar Cane is a known material in pre-1.13
     */
    SUGAR_CANE(338, "SUGAR_CANE_BLOCK"), SUNFLOWER(175, "DOUBLE_PLANT"), SUSPICIOUS_GRAVEL(-1), SUSPICIOUS_SAND(-1), SUSPICIOUS_STEW(-1), SWEET_BERRIES(-1), SWEET_BERRY_BUSH(-1), TADPOLE_BUCKET(-1),
    TADPOLE_SPAWN_EGG(-1), TALL_GRASS(175, 2, "DOUBLE_PLANT"), TALL_SEAGRASS(-1), TARGET(-1), TERRACOTTA(172, "HARD_CLAY"), TIDE_ARMOR_TRIM_SMITHING_TEMPLATE(-1), TINTED_GLASS(-1), TIPPED_ARROW(440),
    TNT(46), TNT_MINECART(407, "EXPLOSIVE_MINECART"), TORCH(50), TORCHFLOWER(-1), TORCHFLOWER_CROP(-1), TORCHFLOWER_SEEDS(-1), TOTEM_OF_UNDYING(449, "TOTEM"), TRADER_LLAMA_SPAWN_EGG(-1),
    TRIAL_KEY(-1), TRIAL_SPAWNER(-1), TRAPPED_CHEST(146), TRIDENT(-1), TRIPWIRE(132), TRIPWIRE_HOOK(131), TROPICAL_FISH(349, 2, "RAW_FISH"), TROPICAL_FISH_BUCKET(-1), TROPICAL_FISH_SPAWN_EGG(-1),
    TUBE_CORAL(-1), TUBE_CORAL_BLOCK(-1), TUBE_CORAL_FAN(-1), TUBE_CORAL_WALL_FAN(-1), TUFF_BRICKS(-1), TUFF_BRICK_SLAB(-1), TUFF_BRICK_STAIRS(-1), TUFF_BRICK_WALL(-1), TUFF_SLAB(-1), TUFF_STAIRS(-1),
    TUFF_WALL(-1), TUFF(-1), TURTLE_EGG(-1), TURTLE_HELMET(-1), TURTLE_SCUTE(-1), TURTLE_SPAWN_EGG(-1), TWISTING_VINES(-1), TWISTING_VINES_PLANT(-1), VAULT(-1), VERDANT_FROGLIGHT(-1),
    VEX_ARMOR_TRIM_SMITHING_TEMPLATE(-1), VEX_SPAWN_EGG(383, 35, "MONSTER_EGG"), VILLAGER_SPAWN_EGG(383, 120, "MONSTER_EGG"), VINDICATOR_SPAWN_EGG(383, 36, "MONSTER_EGG"), VINE(106),
    /**
     * 1.13 tag is not added because it's the same thing as {@link #AIR}
     *
     * @see #CAVE_AIR
     */
    VOID_AIR(-1, "AIR"), WALL_TORCH(50, "TORCH"), WANDERING_TRADER_SPAWN_EGG(-1), WARDEN_SPAWN_EGG(-1), WARD_ARMOR_TRIM_SMITHING_TEMPLATE(-1), WARPED_BUTTON(-1), WARPED_DOOR(-1), WARPED_FENCE(-1),
    WARPED_FENCE_GATE(-1), WARPED_FUNGUS(-1), WARPED_FUNGUS_ON_A_STICK(-1), WARPED_HANGING_SIGN(-1), WARPED_HYPHAE(-1), WARPED_NYLIUM(-1), WARPED_PLANKS(-1), WARPED_PRESSURE_PLATE(-1),
    WARPED_ROOTS(-1), WARPED_SIGN(-1, "SIGN_POST"), WARPED_SLAB(-1), WARPED_STAIRS(-1), WARPED_STEM(-1), WARPED_TRAPDOOR(-1), WARPED_WALL_HANGING_SIGN(-1), WARPED_WALL_SIGN(-1, "WALL_SIGN"),
    WARPED_WART_BLOCK(-1),
    /**
     * This is used for blocks only. In 1.13- WATER will turn into STATIONARY_WATER
     * after it finished spreading. After 1.13+ this uses
     * https://hub.spigotmc.org/javadocs/spigot/org/bukkit/block/data/Levelled.html
     * water flowing system.
     */
    WATER(8, "STATIONARY_WATER"), WATER_BUCKET(326), WATER_CAULDRON(-1), WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE(-1), WAXED_CHISELED_COPPER(-1), WAXED_COPPER_BLOCK(-1), WAXED_COPPER_BULB(-1),
    WAXED_COPPER_DOOR(-1), WAXED_COPPER_GRATE(-1), WAXED_COPPER_TRAPDOOR(-1), WAXED_CUT_COPPER(-1), WAXED_CUT_COPPER_SLAB(-1), WAXED_EXPOSED_CHISELED_COPPER(-1), WAXED_EXPOSED_COPPER_BULB(-1),
    WAXED_EXPOSED_COPPER_DOOR(-1), WAXED_OXIDIZED_COPPER_BULB(-1), WAXED_OXIDIZED_COPPER_DOOR(-1), WAXED_OXIDIZED_COPPER_GRATE(-1), WAXED_OXIDIZED_COPPER_TRAPDOOR(-1),
    WAXED_WEATHERED_CHISELED_COPPER(-1), WAXED_WEATHERED_COPPER_BULB(-1), WAXED_WEATHERED_COPPER_DOOR(-1), WAXED_WEATHERED_COPPER_GRATE(-1), WEATHERED_COPPER_BULB(-1), WEATHERED_COPPER_DOOR(-1),
    WEATHERED_COPPER_GRATE(-1), WEATHERED_COPPER_TRAPDOOR(-1), WAXED_WEATHERED_COPPER_TRAPDOOR(-1), WEATHERED_CHISELED_COPPER(-1), WAXED_EXPOSED_COPPER_GRATE(-1), WAXED_OXIDIZED_CHISELED_COPPER(-1),
    WAXED_EXPOSED_COPPER_TRAPDOOR(-1), WAXED_CUT_COPPER_STAIRS(-1), WAXED_EXPOSED_COPPER(-1), WAXED_EXPOSED_CUT_COPPER(-1), WAXED_EXPOSED_CUT_COPPER_SLAB(-1), WAXED_EXPOSED_CUT_COPPER_STAIRS(-1),
    WAXED_OXIDIZED_COPPER(-1), WAXED_OXIDIZED_CUT_COPPER(-1), WAXED_OXIDIZED_CUT_COPPER_SLAB(-1), WAXED_OXIDIZED_CUT_COPPER_STAIRS(-1), WAXED_WEATHERED_COPPER(-1), WAXED_WEATHERED_CUT_COPPER(-1),
    WAXED_WEATHERED_CUT_COPPER_SLAB(-1), WAXED_WEATHERED_CUT_COPPER_STAIRS(-1), WEATHERED_COPPER(-1), WEATHERED_CUT_COPPER(-1), WEATHERED_CUT_COPPER_SLAB(-1), WEATHERED_CUT_COPPER_STAIRS(-1),
    WEEPING_VINES(-1), WEEPING_VINES_PLANT(-1), WET_SPONGE(19, 1, "SPONGE"),
    /**
     * Wheat is a known material in pre-1.13
     */
    WHEAT(296, "CROPS"), WHEAT_SEEDS(295, "SEEDS"), WHITE_BANNER(425, 15, "STANDING_BANNER", "BANNER"), WHITE_BED(355, "BED_BLOCK", "BED"), WHITE_CANDLE(-1), WHITE_CANDLE_CAKE(-1),
    WHITE_CARPET(171, "CARPET"), WHITE_CONCRETE(251, "CONCRETE"), WHITE_CONCRETE_POWDER(252, "CONCRETE_POWDER"), WHITE_DYE(-1, 15, "INK_SACK", "BONE_MEAL"), WHITE_GLAZED_TERRACOTTA(235),
    WHITE_SHULKER_BOX(219), WHITE_STAINED_GLASS(95, "STAINED_GLASS"), WHITE_STAINED_GLASS_PANE(160, "THIN_GLASS", "STAINED_GLASS_PANE"), WHITE_TERRACOTTA(159, "STAINED_CLAY"),
    WHITE_TULIP(38, 6, "RED_ROSE"), WHITE_WALL_BANNER(177, 15, "WALL_BANNER"), WHITE_WOOL(35, "WOOL"), WILD_ARMOR_TRIM_SMITHING_TEMPLATE(-1), WIND_CHARGE(-1), WITCH_SPAWN_EGG(383, 66, "MONSTER_EGG"),
    WITHER_ROSE(-1), WITHER_SKELETON_SKULL(397, 1, "SKULL", "SKULL_ITEM"), WITHER_SKELETON_SPAWN_EGG(383, 5, "MONSTER_EGG"), WITHER_SKELETON_WALL_SKULL(-1, 1, "SKULL", "SKULL_ITEM"),
    WITHER_SPAWN_EGG(-1), WOLF_ARMOR(-1), WOLF_SPAWN_EGG(383, 95, "MONSTER_EGG"), WOODEN_AXE(271, "WOOD_AXE"), WOODEN_HOE(290, "WOOD_HOE"), WOODEN_PICKAXE(270, "WOOD_PICKAXE"),
    WOODEN_SHOVEL(269, "WOOD_SPADE"), WOODEN_SWORD(268, "WOOD_SWORD"), WRITABLE_BOOK(386, "BOOK_AND_QUILL"), WRITTEN_BOOK(387), YELLOW_BANNER(425, 11, "STANDING_BANNER", "BANNER"),
    YELLOW_BED(355, supports(12) ? 4 : 0, "BED_BLOCK", "BED"), YELLOW_CANDLE(-1), YELLOW_CANDLE_CAKE(-1), YELLOW_CARPET(171, 4, "CARPET"), YELLOW_CONCRETE(251, 4, "CONCRETE"),
    YELLOW_CONCRETE_POWDER(252, 4, "CONCRETE_POWDER"),
    /**
     * 1.13 renamed to DANDELION_YELLOW 1.14 renamed to YELLOW_DYE
     */
    YELLOW_DYE(351, 11, "INK_SACK", "DANDELION_YELLOW"), YELLOW_GLAZED_TERRACOTTA(239), YELLOW_SHULKER_BOX(223), YELLOW_STAINED_GLASS(95, 4, "STAINED_GLASS"),
    YELLOW_STAINED_GLASS_PANE(160, 4, "THIN_GLASS", "STAINED_GLASS_PANE"), YELLOW_TERRACOTTA(159, 4, "STAINED_CLAY"), YELLOW_WALL_BANNER(177, 11, "WALL_BANNER"), YELLOW_WOOL(35, 4, "WOOL"),
    ZOGLIN_SPAWN_EGG(-1), ZOMBIE_HEAD(397, 2, "SKULL", "SKULL_ITEM"), ZOMBIE_HORSE_SPAWN_EGG(383, 29, "MONSTER_EGG"), ZOMBIE_SPAWN_EGG(383, 54, "MONSTER_EGG"),
    ZOMBIE_VILLAGER_SPAWN_EGG(383, 27, "MONSTER_EGG"), ZOMBIE_WALL_HEAD(-1, 2, "SKULL", "SKULL_ITEM"), ZOMBIFIED_PIGLIN_SPAWN_EGG(383, 57, "MONSTER_EGG", "ZOMBIE_PIGMAN_SPAWN_EGG");

    /**
     * Cached array of {@link XMaterial#values()} to avoid allocating memory for
     * calling the method every time.
     *
     * @since 2.0.0
     */
    public static final XMaterial[] VALUES = values();

    /**
     *
     * @since 5.1.0
     */
    private static final Map<String, XMaterial> NAMES = new HashMap<>();

    /**
     * Guava (Google Core Libraries for Java)'s cache for performance and timed
     * caches. For strings that match a certain XMaterial. Mostly cached for
     * configs.
     *
     * @since 1.0.0
     */
    private static final Map<String, XMaterial> NAME_CACHE = new TempMap<>(20 * 60 * 60);
    /**
     * This is used for {@link #isOneOf(Collection)}
     *
     * @since 3.4.0
     */
    private static final Map<String, Pattern> CACHED_REGEX = new TempMap<>(20 * 60 * 60 * 3);
    /**
     * The maximum data value in the pre-flattening update which belongs to
     * {@link #VILLAGER_SPAWN_EGG}<br>
     * https://minecraftitemids.com/types/spawn-egg
     *
     * @see #matchXMaterialWithData(String)
     * @since 8.0.0
     */
    private static final byte MAX_DATA_VALUE = 120;
    /**
     * Used to tell the system that the passed object's (name or material) data
     * value is not provided or is invalid.
     *
     * @since 8.0.0
     */
    private static final byte UNKNOWN_DATA_VALUE = -1;
    /**
     * The maximum material ID before the pre-flattening update which belongs to
     * {@link #MUSIC_DISC_WAIT}
     *
     * @since 8.1.0
     */
    private static final short MAX_ID = 2267;
    /**
     * <b>XMaterial Paradox (Duplication Check)</b>
     * <p>
     * A set of duplicated material names in 1.13 and 1.12 that will conflict with
     * the legacy names. Values are the new material names. This map also contains
     * illegal elements. Check the static initializer for more info.
     * <p>
     * Duplications are not useful at all in versions above the flattening update
     * {@link Data#ISFLAT} This set is only used for matching materials, for parsing
     * refer to {@link #isDuplicated()}
     *
     * @since 3.0.0
     */
    private static final Set<String> DUPLICATED;

    static {
        for (XMaterial material : VALUES)
            NAMES.put(material.name(), material);
    }

    static {
        if (Data.ISFLAT)
            // It's not needed at all if it's the newer version. We can save some memory.
            DUPLICATED = null;
        else {
            // MELON_SLICE, CARROTS, POTATOES, BEETROOTS, GRASS_BLOCK, BRICKS,
            // NETHER_BRICKS, BROWN_MUSHROOM
            // Using the constructor to add elements will decide to allocate more size which
            // we don't need.
            DUPLICATED = new HashSet<>(4);
            DUPLICATED.add("GRASS");
            DUPLICATED.add(MELON.name());
            DUPLICATED.add(BRICK.name());
            DUPLICATED.add(NETHER_BRICK.name());
        }
    }

    /**
     * The id value of this material
     * https://www.digminecraft.com/lists/item_id_list_pc.php Can be a negative
     * number if ID doesn't exist for this material.
     *
     * @see #getId()
     */
    private final int id;

    /**
     * The data value of this material
     * https://minecraft.gamepedia.com/Java_Edition_data_values/Pre-flattening It's
     * never a negative number.
     *
     * @see #getData()
     */
    private final byte data;
    /**
     * A list of material names that was being used for older verions.
     *
     * @see #getLegacy()
     */
    private final String[] legacy;
    /**
     * The cached Bukkit parsed material.
     *
     * @see #parseMaterial()
     * @since 9.0.0
     */
    private final Material material;

    XMaterial(int id, int data, String... legacy) {
        this.id = id;
        this.data = (byte) data;
        this.legacy = legacy;

        Material mat = null;
        if (!Data.ISFLAT && this.isDuplicated() || (mat = Material.getMaterial(name())) == null)
            for (int i = legacy.length - 1; i >= 0; i--) {
                mat = Material.getMaterial(legacy[i]);
                if (mat != null)
                    break;
            }
        material = mat;
    }

    XMaterial(int id, String... legacy) {
        this(id, 0, legacy);
    }

    /**
     * Checks if the version is 1.13 Aquatic Update or higher. An invocation of this
     * method yields the cached result from the expression:
     * <p>
     * <blockquote> {@link #supports(int) 13}} </blockquote>
     *
     * @return true if 1.13 or higher.
     * @see #getVersion()
     * @see #supports(int)
     * @since 1.0.0
     * @deprecated Use {@code XMaterial.supports(13)} instead. This method name can
     * be confusing.
     */
    @Deprecated
    public static boolean isNewVersion() {
        return Data.ISFLAT;
    }

    /**
     * This is just an extra method that can be used for many cases. It can be used
     * in {@link org.bukkit.event.player.PlayerInteractEvent} or when accessing
     * {@link org.bukkit.entity.Player#getMainHand()}, or other compatibility
     * related methods.
     * <p>
     * An invocation of this method yields exactly the same result as the
     * expression:
     * <p>
     * <blockquote> !{@link #supports(int)} 9 </blockquote>
     *
     * @since 2.0.0
     * @deprecated Use {@code !XMaterial.supports(9)} instead.
     */
    @Deprecated
    public static boolean isOneEight() {
        return !supports(9);
    }

    /**
     * Gets the XMaterial with this name similar to {@link #valueOf(String)} without
     * throwing an exception.
     *
     * @param name the name of the material.
     * @return an optional that can be empty.
     * @since 5.1.0
     */
    private static Optional<XMaterial> getIfPresent(String name) {
        return Optional.ofNullable(NAMES.get(name));
    }

    public String getFormattedName() {
        StringContainer container = new StringContainer(name().length());
        boolean first = true;
        for (String split : name().split("_")) {
            if (first) {
                container.append(split.charAt(0)).append(split.substring(1).toLowerCase());
                first = false;
                continue;
            }
            container.append(' ');
            if (split.equals("OF") || split.equals("THE"))
                container.append(split.toLowerCase());
            else
                container.append(split.charAt(0)).append(split.substring(1).toLowerCase());
        }
        return container.toString();
    }

    /**
     * The current version of the server.
     *
     * @return the current server version minor number.
     * @see #supports(int)
     * @since 2.0.0
     */
    public static int getVersion() {
        return Data.VERSION;
    }

    /**
     * When using 1.13+, this helps to find the old material name with its data
     * value using a cached search for optimization.
     *
     * @see #matchDefinedXMaterial(String, byte)
     * @since 1.0.0
     */
    private static XMaterial requestOldXMaterial(String name, byte data) {
        String holder = name + data;
        XMaterial cache = NAME_CACHE.get(holder);
        if (cache != null)
            return cache;

        for (XMaterial material : VALUES)
            // Not using material.name().equals(name) check is intended.
            if ((data == UNKNOWN_DATA_VALUE || data == material.data) && material.anyMatchLegacy(name)) {
                NAME_CACHE.put(holder, material);
                return material;
            }

        return null;
    }

    /**
     * Parses the given material name as an XMaterial with a given data value in the
     * string if attached. Check {@link #matchXMaterialWithData(String)} for more
     * info.
     *
     * @see #matchXMaterialWithData(String)
     * @see #matchDefinedXMaterial(String, byte)
     * @since 2.0.0
     */
    public static Optional<XMaterial> matchXMaterial(String name) {
        if (name == null || name.isEmpty())
            throw new IllegalArgumentException("Cannot match a material with null or empty material name");
        Optional<XMaterial> oldMatch = matchXMaterialWithData(name);
        return oldMatch.isPresent() ? oldMatch : matchDefinedXMaterial(format(name), UNKNOWN_DATA_VALUE);
    }

    /**
     * Parses material name and data value from the specified string. The separator
     * for the material name and its data value is {@code :} Spaces are allowed.
     * Mostly used when getting materials from config for old school minecrafters.
     * <p>
     * <b>Examples</b>
     * <p>
     *
     * <pre>
     *     {@code INK_SACK:1 -> RED_DYE}
     *     {@code WOOL: 14  -> RED_WOOL}
     * </pre>
     *
     * @param name the material string that consists of the material name, data and
     *             separator character.
     * @return the parsed XMaterial.
     * @see #matchXMaterial(String)
     * @since 3.0.0
     */
    private static Optional<XMaterial> matchXMaterialWithData(String name) {
        int index = name.indexOf(':');
        if (index != -1) {
            String mat = format(name.substring(0, index));
            byte data = ParseUtils.getByte(name.substring(index + 1));
            return data >= 0 && data < MAX_DATA_VALUE ? matchDefinedXMaterial(mat, data) : matchDefinedXMaterial(mat, UNKNOWN_DATA_VALUE);
        }

        return Optional.empty();
    }

    /**
     * Parses the given material as an XMaterial.
     *
     * @throws IllegalArgumentException may be thrown as an unexpected exception.
     * @see #matchDefinedXMaterial(String, byte)
     * @see #matchXMaterial(ItemStack)
     * @since 2.0.0
     */
    public static XMaterial matchXMaterial(Material material) {
        Objects.requireNonNull(material, "Cannot match null material");
        return matchDefinedXMaterial(material.name(), UNKNOWN_DATA_VALUE).orElseThrow(() -> new IllegalArgumentException("Unsupported material with no data value: " + material.name()));
    }

    /**
     * Parses the given item as an XMaterial using its material and data value
     * (durability) if not a damageable item {@link ItemStack#getDurability()}.
     *
     * @param item the ItemStack to match.
     * @return an XMaterial if matched any.
     * @throws IllegalArgumentException may be thrown as an unexpected exception.
     * @see #matchXMaterial(Material)
     * @since 2.0.0
     */
    @SuppressWarnings("removal")
    public static XMaterial matchXMaterial(ItemStack item) {
        Objects.requireNonNull(item, "Cannot match null ItemStack");
        String material = item.getType().name();
        byte data = (byte) (Data.ISFLAT || item.getType().getMaxDurability() > 0 ? 0 : item.getDurability());

        // Versions 1.9-1.12 didn't really use the items data value.
        if (supports(9) && !supports(13) && item.hasItemMeta() && material.equals("MONSTER_EGG")) {
            ItemMeta meta = item.getItemMeta();
            if (meta instanceof SpawnEggMeta) {
                SpawnEggMeta egg = (SpawnEggMeta) meta;
                material = egg.getSpawnedType().name() + "_SPAWN_EGG";
            }
        }

        // Potions used the items data value to store
        // information about the type of potion in 1.8
        if (!supports(9) && material.equals("POTION")) {
            // Source: v1.8.8 org.bukkit.potion.Potion.fromDamage(int damage)
            int damage = item.getDurability();
            return (damage & 16384) > 0 ? SPLASH_POTION : POTION;
        }

        // Refer to the enum for info.
        // Currently this is the only material with a non-zero data value
        // that has been renamed after the flattening update.
        // If this happens to more materials in the future,
        // I might have to change then system.
        if (Data.ISFLAT && !supports(14) && material.equals("CACTUS_GREEN"))
            return GREEN_DYE;

        // Check FILLED_MAP enum for more info.
        // if (!Data.ISFLAT && item.hasItemMeta() && item.getItemMeta() instanceof
        // org.bukkit.inventory.meta.MapMeta) return FILLED_MAP;

        // No orElseThrow, I don't want to deal with Java's final variable bullshit.
        Optional<XMaterial> result = matchDefinedXMaterial(material, data);
        if (result.isPresent())
            return result.get();
        throw new IllegalArgumentException("Unsupported material from item: " + material + " (" + data + ')');
    }

    /**
     * The main method that parses the given material name and data value as an
     * XMaterial. All the values passed to this method will not be null or empty and
     * are formatted correctly.
     *
     * @param name the formatted name of the material.
     * @param data the data value of the material. Is always 0 or
     *             {@link #UNKNOWN_DATA_VALUE} when {@link Data#ISFLAT}
     * @return an XMaterial (with the same data value if specified)
     * @see #matchXMaterial(Material)
     * @see #matchXMaterial(int, byte)
     * @see #matchXMaterial(ItemStack)
     * @since 3.0.0
     */
    protected static Optional<XMaterial> matchDefinedXMaterial(String name, byte data) {
        // if
        // (!Boolean.valueOf(Boolean.getBoolean(Boolean.TRUE.toString())).equals(Boolean.FALSE.booleanValue()))
        // return null;
        Boolean duplicated = null;
        boolean isAMap = name.equalsIgnoreCase("MAP");

        // Do basic number and boolean checks before accessing more complex enum stuff.
        if (Data.ISFLAT || !isAMap && data <= 0 && !(duplicated = isDuplicated(name))) {
            Optional<XMaterial> xMaterial = getIfPresent(name);
            if (xMaterial.isPresent())
                return xMaterial;
        }
        // Usually flat versions wouldn't pass this point, but some special materials
        // do.

        XMaterial oldXMaterial = requestOldXMaterial(name, data);
        if (oldXMaterial == null)
            // Special case. Refer to FILLED_MAP for more info.
            return data >= 0 && isAMap ? Optional.of(FILLED_MAP) : Optional.empty();

        if (!Data.ISFLAT && oldXMaterial.isPlural() && (duplicated == null ? isDuplicated(name) : duplicated))
            return getIfPresent(name);
        return Optional.of(oldXMaterial);
    }

    /**
     * <b>XMaterial Paradox (Duplication Check)</b> Checks if the material has any
     * duplicates.
     * <p>
     * <b>Example:</b>
     * <p>
     * {@code MELON, CARROT, POTATO, BEETROOT -> true}
     *
     * @param name the name of the material to check.
     * @return true if there's a duplicated material for this material, otherwise
     * false.
     * @since 2.0.0
     */
    private static boolean isDuplicated(String name) {
        // Don't use matchXMaterial() since this method is being called from
        // matchXMaterial() itself and will cause a StackOverflowError.
        return DUPLICATED.contains(name);
    }

    /**
     * Gets the XMaterial based on the material's ID (Magic Value) and data
     * value.<br>
     * You should avoid using this for performance issues.
     *
     * @param id   the ID (Magic value) of the material.
     * @param data the data value of the material.
     * @return a parsed XMaterial with the same ID and data value.
     * @see #matchXMaterial(ItemStack)
     * @since 2.0.0
     * @deprecated this method loops through all the available materials and matches
     * their ID using {@link #getId()} which takes a really long time.
     * Plugins should no longer support IDs. If you want, you can make a
     * {@link Map} cache yourself. This method obviously doesn't work
     * for 1.13+ and will not be supported. This is only here for
     * debugging purposes.
     */
    @Deprecated
    public static Optional<XMaterial> matchXMaterial(int id, byte data) {
        if (id < 0 || id > MAX_ID || data < 0)
            return Optional.empty();
        for (XMaterial materials : VALUES)
            if (materials.data == data && materials.getId() == id)
                return Optional.of(materials);
        return Optional.empty();
    }

    /**
     * Attempts to build the string like an enum name. Removes all the spaces, and
     * extra non-English characters. Also removes some config/in-game based strings.
     * While this method is hard to maintain, it's extremely efficient. It's
     * approximately more than x5 times faster than the normal RegEx + String
     * Methods approach for both formatted and unformatted material names.
     *
     * @param name the material name to modify.
     * @return an enum name.
     * @since 2.0.0
     */
    protected static String format(String name) {
        int len = name.length();
        char[] chs = new char[len];
        int count = 0;
        boolean appendUnderline = false;

        for (int i = 0; i < len; i++) {
            char ch = name.charAt(i);

            if (!appendUnderline && count != 0 && (ch == '-' || ch == ' ' || ch == '_') && chs[count] != '_')
                appendUnderline = true;
            else {
                boolean number = false;
                // Old materials have numbers in them.
                if (ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || (number = ch >= '0' && ch <= '9')) {
                    if (appendUnderline) {
                        chs[count++] = '_';
                        appendUnderline = false;
                    }

                    if (number)
                        chs[count++] = ch;
                    else
                        chs[count++] = (char) (ch & 0x5f);
                }
            }
        }

        return new String(chs, 0, count);
    }

    /**
     * Checks if the specified version is the same version or higher than the
     * current server version.
     *
     * @param version the major version to be checked. "1." is ignored. E.g. 1.12 =
     *                12 | 1.9 = 9
     * @return true of the version is equal or higher than the current version.
     * @since 2.0.0
     */
    public static boolean supports(int version) {
        return Data.VERSION >= version;
    }

    public String[] getLegacy() {
        return legacy;
    }

    /**
     * XMaterial Paradox (Duplication Check) I've concluded that this is just an
     * infinite loop that keeps going around the Singular Form and the Plural Form
     * materials. A waste of brain cells and a waste of time. This solution works
     * just fine anyway.
     * <p>
     * A solution for XMaterial Paradox. Manually parses the duplicated materials to
     * find the exact material based on the server version. If the name ends with
     * "S" -> Plural Form Material. Plural methods are only plural if they're also
     * {@link #DUPLICATED}
     * <p>
     * The only special exceptions are {@link #BRICKS} and {@link #NETHER_BRICKS}
     *
     * @return true if this material is a plural form material, otherwise false.
     * @since 8.0.0
     */
    private boolean isPlural() {
        // this.name().charAt(this.name().length() - 1) == 'S'
        return this == CARROTS || this == POTATOES;
    }

    /**
     * Checks if the list of given material names matches the given base material.
     * Mostly used for configs.
     * <p>
     * Supports {@link String#contains} {@code CONTAINS:NAME} and Regular Expression
     * {@code REGEX:PATTERN} formats.
     * <p>
     * <b>Example:</b> <blockquote>
     *
     * <pre>
     *     XMaterial material = {@link #matchXMaterial(ItemStack)};
     *     if (material.isOneOf(plugin.getConfig().getStringList("disabled-items")) return;
     * </pre>
     *
     * </blockquote> <br>
     * <b>{@code CONTAINS} Examples:</b>
     *
     * <pre>
     *     {@code "CONTAINS:CHEST" -> CHEST, ENDERCHEST, TRAPPED_CHEST -> true}
     *     {@code "cOnTaINS:dYe" -> GREEN_DYE, YELLOW_DYE, BLUE_DYE, INK_SACK -> true}
     * </pre>
     * <p>
     * <b>{@code REGEX} Examples</b>
     *
     * <pre>
     *     {@code "REGEX:^.+_.+_.+$" -> Every Material with 3 underlines or more: SHULKER_SPAWN_EGG, SILVERFISH_SPAWN_EGG, SKELETON_HORSE_SPAWN_EGG}
     *     {@code "REGEX:^.{1,3}$" -> Material names that have 3 letters only: BED, MAP, AIR}
     * </pre>
     * <p>
     * The reason that there are tags for {@code CONTAINS} and {@code REGEX} is for
     * the performance. Although RegEx patterns are cached in this method, please
     * avoid using the {@code REGEX} tag if you can use the {@code CONTAINS} tag
     * instead. It'll have a huge impact on performance. Please avoid using
     * {@code (capturing groups)} there's no use for them in this case. If you want
     * to use groups, use {@code (?: non-capturing groups)}. It's faster.
     * <p>
     * Want to learn RegEx? You can mess around in
     * <a href="https://regexr.com/">RegExr</a> website.
     *
     * @param materials the material names to check base material on.
     * @return true if one of the given material names is similar to the base
     * material.
     * @since 3.1.1
     */
    public boolean isOneOf(Collection<String> materials) {
        if (materials == null || materials.isEmpty())
            return false;
        String name = name();

        for (String comp : materials) {
            String checker = comp.toUpperCase(Locale.ENGLISH);
            if (checker.startsWith("CONTAINS:")) {
                comp = format(checker.substring(9));
                if (name.contains(comp))
                    return true;
                continue;
            }
            if (checker.startsWith("REGEX:")) {
                comp = comp.substring(6);
                Pattern pattern = CACHED_REGEX.get(comp);
                if (pattern == null)
                    try {
                        pattern = Pattern.compile(comp);
                        CACHED_REGEX.put(comp, pattern);
                    } catch (PatternSyntaxException ex) {
                        ex.printStackTrace();
                    }
                if (pattern != null && pattern.matcher(name).matches())
                    return true;
                continue;
            }

            // Direct Object Equals
            Optional<XMaterial> xMat = matchXMaterial(comp);
            if (xMat.isPresent() && xMat.get() == this)
                return true;
        }
        return false;
    }

    /**
     * Sets the {@link Material} (and data value on older versions) of an item.
     * Damageable materials will not have their durability changed.
     * <p>
     * Use {@link #parseItem()} instead when creating new ItemStacks.
     *
     * @param item the item to change its type.
     * @see #parseItem()
     * @since 3.0.0
     */
    public ItemStack setType(ItemStack item) {
        Objects.requireNonNull(item, "Cannot set material for null ItemStack");
        Material material = parseMaterial();
        Objects.requireNonNull(material, () -> "Unsupported material: " + name());

        item.setType(material);
        if (!Data.ISFLAT && material.getMaxDurability() <= 0)
            item.setDurability(data);
        // Splash Potions weren't an official material pre-flattening.
        if (!Data.ISFLAT && this == SPLASH_POTION)
            item.setDurability((short) 16384); // Hard-coded as 'data' is only a byte.
        return item;
    }

    /**
     * Checks if the given material name matches any of this xmaterial's legacy
     * material names. All the values passed to this method will not be null or
     * empty and are formatted correctly.
     *
     * @param name the material name to check.
     * @return true if it's one of the legacy names, otherwise false.
     * @since 2.0.0
     */
    private boolean anyMatchLegacy(String name) {
        for (int i = legacy.length - 1; i >= 0; i--)
            if (name.equals(legacy[i]))
                return true;
        return false;
    }

    /**
     * Parses an enum name to a user-friendly name. These names will have underlines
     * removed and with each word capitalized.
     * <p>
     * <b>Examples:</b>
     *
     * <pre>
     *     {@literal EMERALD                 -> Emerald}
     *     {@literal EMERALD_BLOCK           -> Emerald Block}
     *     {@literal ENCHANTED_GOLDEN_APPLE  -> Enchanted Golden Apple}
     * </pre>
     *
     * @return a more user-friendly enum name.
     * @since 3.0.0
     */
    @Override
    public String toString() {
        return Arrays.stream(name().split("_")).map(t -> t.charAt(0) + t.substring(1).toLowerCase()).collect(Collectors.joining(" "));
    }

    /**
     * Gets the ID (Magic value) of the material.
     * https://www.minecraftinfo.com/idlist.htm
     * <p>
     * Spigot added material ID support back in 1.16+
     *
     * @return the ID of the material or <b>-1</b> if it's not a legacy material or
     * the server doesn't support the material.
     * @see #matchXMaterial(int, byte)
     * @since 2.2.0
     */
    public int getId() {
        return id;
    }

    /**
     * The data value of this material <a href=
     * "https://minecraft.gamepedia.com/Java_Edition_data_values/Pre-flattening">pre-flattening</a>.
     * <p>
     * Can be accessed with {@link ItemStack#getData()} then
     * {@code MaterialData#getData()} or {@link ItemStack#getDurability()} if not
     * damageable.
     *
     * @return data of this material, or 0 if none.
     * @since 1.0.0
     */
    public byte getData() {
        return data;
    }

    /**
     * Parses an item from this XMaterial. Uses data values on older versions.
     *
     * @return an ItemStack with the same material (and data value if in older
     * versions.)
     * @see #setType(ItemStack)
     * @since 2.0.0
     */
    public ItemStack parseItem() {
        Material material = parseMaterial();
        if (material == null)
            return null;
        ItemStack base = Data.ISFLAT ? new ItemStack(material) : new ItemStack(material, 1, data);
        // Splash Potions weren't an official material pre-flattening.
        if (!Data.ISFLAT && this == SPLASH_POTION)
            base.setDurability((short) 16384); // Hard-coded as 'data' is only a byte.
        return base;
    }

    /**
     * Parses the material of this XMaterial.
     *
     * @return the material related to this XMaterial based on the server version.
     * @since 1.0.0
     */
    public Material parseMaterial() {
        return material;
    }

    public boolean isAir() {
        switch (this) {
            case AIR:
            case VOID_AIR:
            case STRUCTURE_VOID:
            case CAVE_AIR:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Checks if an item has the same material (and data value on older versions).
     *
     * @param item item to check.
     * @return true if the material is the same as the item's material (and data
     * value if on older versions), otherwise false.
     * @since 1.0.0
     */
    public boolean isSimilar(ItemStack item) {
        Objects.requireNonNull(item, "Cannot compare with null ItemStack");
        if (item.getType() != parseMaterial())
            return false;
        // Special case for splash potions.
        if (this == SPLASH_POTION)
            return Data.ISFLAT || item.getDurability() == (short) 16384;
        return Data.ISFLAT || item.getDurability() == data || item.getType().getMaxDurability() > 0;
    }

    /**
     * Checks if this material is supported in the current version. Suggested
     * materials will be ignored.
     * <p>
     * Note that you should use {@link #parseMaterial()} or {@link #parseItem()} and
     * check if it's null if you're going to parse and use the material/item later.
     *
     * @return true if the material exists in {@link Material} list.
     * @since 2.0.0
     */
    public boolean isSupported() {
        return material != null;
    }

    /**
     * This method is needed due to Java enum initialization limitations. It's
     * really inefficient yes, but it's only used for initialization.
     * <p>
     * Yes there are many other ways like comparing the hardcoded ordinal or using a
     * boolean in the enum constructor, but it's not really a big deal.
     * <p>
     * This method should not be called if the version is after the flattening
     * update {@link Data#ISFLAT} and is only used for parsing materials, not
     * matching, for matching check {@link #DUPLICATED}
     */
    private boolean isDuplicated() {
        switch (name()) {
            case "MELON":
            case "CARROT":
            case "POTATO":
            case "GRASS":
            case "BRICK":
            case "NETHER_BRICK":

                // Illegal Elements
                // Since both 1.12 and 1.13 have <type>_DOOR XMaterial will use it
                // for 1.12 to parse the material, but it needs <type>_DOOR_ITEM.
                // We'll trick XMaterial into thinking this needs to be parsed
                // using the old methods.
                // Some of these materials have their enum name added to the legacy list as
                // well.
            case "DARK_OAK_DOOR":
            case "ACACIA_DOOR":
            case "BIRCH_DOOR":
            case "JUNGLE_DOOR":
            case "SPRUCE_DOOR":
            case "MAP":
            case "CAULDRON":
            case "BREWING_STAND":
            case "FLOWER_POT":
                return true;
            default:
                return false;
        }
    }

    /**
     * Used for data that need to be accessed during enum initialization.
     *
     * @since 9.0.0
     */
    private static final class Data {
        /**
         * The current version of the server in the form of a major version. If the
         * static initialization for this fails, you know something's wrong with the
         * server software.
         *
         * @since 1.0.0
         */
        private static final int VERSION;

        static { // This needs to be right below VERSION because of initialization order.
            String version = Bukkit.getVersion();
            Matcher matcher = Pattern.compile("MC: \\d\\.(\\d+)").matcher(version);

            if (!matcher.find())
                throw new IllegalArgumentException("Failed to parse server version from: " + version);
            VERSION = Integer.parseInt(matcher.group(1));
        }

        /**
         * Cached result if the server version is after the v1.13 flattening update.
         *
         * @since 3.0.0
         */
        private static final boolean ISFLAT = supports(13);
    }
}